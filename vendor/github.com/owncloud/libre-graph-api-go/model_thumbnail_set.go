/*
Libre Graph API

Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.

API version: v1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libregraph

import (
	"encoding/json"
)

// checks if the ThumbnailSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThumbnailSet{}

// ThumbnailSet The ThumbnailSet resource is a keyed collection of thumbnail resources. It's used to represent a set of thumbnails associated with a DriveItem.
type ThumbnailSet struct {
	// The ID within the item. Read-only.
	Id     *string    `json:"id,omitempty"`
	Large  *Thumbnail `json:"large,omitempty"`
	Medium *Thumbnail `json:"medium,omitempty"`
	Small  *Thumbnail `json:"small,omitempty"`
	Source *Thumbnail `json:"source,omitempty"`
}

// NewThumbnailSet instantiates a new ThumbnailSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThumbnailSet() *ThumbnailSet {
	this := ThumbnailSet{}
	return &this
}

// NewThumbnailSetWithDefaults instantiates a new ThumbnailSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThumbnailSetWithDefaults() *ThumbnailSet {
	this := ThumbnailSet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ThumbnailSet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailSet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ThumbnailSet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ThumbnailSet) SetId(v string) {
	o.Id = &v
}

// GetLarge returns the Large field value if set, zero value otherwise.
func (o *ThumbnailSet) GetLarge() Thumbnail {
	if o == nil || IsNil(o.Large) {
		var ret Thumbnail
		return ret
	}
	return *o.Large
}

// GetLargeOk returns a tuple with the Large field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailSet) GetLargeOk() (*Thumbnail, bool) {
	if o == nil || IsNil(o.Large) {
		return nil, false
	}
	return o.Large, true
}

// HasLarge returns a boolean if a field has been set.
func (o *ThumbnailSet) HasLarge() bool {
	if o != nil && !IsNil(o.Large) {
		return true
	}

	return false
}

// SetLarge gets a reference to the given Thumbnail and assigns it to the Large field.
func (o *ThumbnailSet) SetLarge(v Thumbnail) {
	o.Large = &v
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *ThumbnailSet) GetMedium() Thumbnail {
	if o == nil || IsNil(o.Medium) {
		var ret Thumbnail
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailSet) GetMediumOk() (*Thumbnail, bool) {
	if o == nil || IsNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *ThumbnailSet) HasMedium() bool {
	if o != nil && !IsNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given Thumbnail and assigns it to the Medium field.
func (o *ThumbnailSet) SetMedium(v Thumbnail) {
	o.Medium = &v
}

// GetSmall returns the Small field value if set, zero value otherwise.
func (o *ThumbnailSet) GetSmall() Thumbnail {
	if o == nil || IsNil(o.Small) {
		var ret Thumbnail
		return ret
	}
	return *o.Small
}

// GetSmallOk returns a tuple with the Small field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailSet) GetSmallOk() (*Thumbnail, bool) {
	if o == nil || IsNil(o.Small) {
		return nil, false
	}
	return o.Small, true
}

// HasSmall returns a boolean if a field has been set.
func (o *ThumbnailSet) HasSmall() bool {
	if o != nil && !IsNil(o.Small) {
		return true
	}

	return false
}

// SetSmall gets a reference to the given Thumbnail and assigns it to the Small field.
func (o *ThumbnailSet) SetSmall(v Thumbnail) {
	o.Small = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ThumbnailSet) GetSource() Thumbnail {
	if o == nil || IsNil(o.Source) {
		var ret Thumbnail
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThumbnailSet) GetSourceOk() (*Thumbnail, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ThumbnailSet) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given Thumbnail and assigns it to the Source field.
func (o *ThumbnailSet) SetSource(v Thumbnail) {
	o.Source = &v
}

func (o ThumbnailSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThumbnailSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Large) {
		toSerialize["large"] = o.Large
	}
	if !IsNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !IsNil(o.Small) {
		toSerialize["small"] = o.Small
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableThumbnailSet struct {
	value *ThumbnailSet
	isSet bool
}

func (v NullableThumbnailSet) Get() *ThumbnailSet {
	return v.value
}

func (v *NullableThumbnailSet) Set(val *ThumbnailSet) {
	v.value = val
	v.isSet = true
}

func (v NullableThumbnailSet) IsSet() bool {
	return v.isSet
}

func (v *NullableThumbnailSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThumbnailSet(val *ThumbnailSet) *NullableThumbnailSet {
	return &NullableThumbnailSet{value: val, isSet: true}
}

func (v NullableThumbnailSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThumbnailSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

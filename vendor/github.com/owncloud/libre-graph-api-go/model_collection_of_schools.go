/*
Libre Graph API

Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.

API version: v1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libregraph

import (
	"encoding/json"
)

// checks if the CollectionOfSchools type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionOfSchools{}

// CollectionOfSchools struct for CollectionOfSchools
type CollectionOfSchools struct {
	Value []EducationSchool `json:"value,omitempty"`
}

// NewCollectionOfSchools instantiates a new CollectionOfSchools object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionOfSchools() *CollectionOfSchools {
	this := CollectionOfSchools{}
	return &this
}

// NewCollectionOfSchoolsWithDefaults instantiates a new CollectionOfSchools object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionOfSchoolsWithDefaults() *CollectionOfSchools {
	this := CollectionOfSchools{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CollectionOfSchools) GetValue() []EducationSchool {
	if o == nil || IsNil(o.Value) {
		var ret []EducationSchool
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionOfSchools) GetValueOk() ([]EducationSchool, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CollectionOfSchools) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given []EducationSchool and assigns it to the Value field.
func (o *CollectionOfSchools) SetValue(v []EducationSchool) {
	o.Value = v
}

func (o CollectionOfSchools) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionOfSchools) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableCollectionOfSchools struct {
	value *CollectionOfSchools
	isSet bool
}

func (v NullableCollectionOfSchools) Get() *CollectionOfSchools {
	return v.value
}

func (v *NullableCollectionOfSchools) Set(val *CollectionOfSchools) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionOfSchools) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionOfSchools) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionOfSchools(val *CollectionOfSchools) *NullableCollectionOfSchools {
	return &NullableCollectionOfSchools{value: val, isSet: true}
}

func (v NullableCollectionOfSchools) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionOfSchools) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

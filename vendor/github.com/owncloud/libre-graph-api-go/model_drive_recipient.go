/*
Libre Graph API

Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.

API version: v1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libregraph

import (
	"encoding/json"
)

// checks if the DriveRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DriveRecipient{}

// DriveRecipient Represents a person, group, or other recipient to share a drive item with using the invite action.  When using invite to add permissions, the `driveRecipient` object would specify the `email`, `alias`, or `objectId` of the recipient. Only one of these values is required; multiple values are not accepted.
type DriveRecipient struct {
	// The unique identifier for the recipient in the directory.
	ObjectId *string `json:"objectId,omitempty"`
	// When the recipient is referenced by objectId this annotation is used to differentiate `user` and `group` recipients.
	LibreGraphRecipientType *string `json:"@libre.graph.recipient.type,omitempty"`
}

// NewDriveRecipient instantiates a new DriveRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriveRecipient() *DriveRecipient {
	this := DriveRecipient{}
	var libreGraphRecipientType string = "user"
	this.LibreGraphRecipientType = &libreGraphRecipientType
	return &this
}

// NewDriveRecipientWithDefaults instantiates a new DriveRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriveRecipientWithDefaults() *DriveRecipient {
	this := DriveRecipient{}
	var libreGraphRecipientType string = "user"
	this.LibreGraphRecipientType = &libreGraphRecipientType
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *DriveRecipient) GetObjectId() string {
	if o == nil || IsNil(o.ObjectId) {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveRecipient) GetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *DriveRecipient) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *DriveRecipient) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetLibreGraphRecipientType returns the LibreGraphRecipientType field value if set, zero value otherwise.
func (o *DriveRecipient) GetLibreGraphRecipientType() string {
	if o == nil || IsNil(o.LibreGraphRecipientType) {
		var ret string
		return ret
	}
	return *o.LibreGraphRecipientType
}

// GetLibreGraphRecipientTypeOk returns a tuple with the LibreGraphRecipientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveRecipient) GetLibreGraphRecipientTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LibreGraphRecipientType) {
		return nil, false
	}
	return o.LibreGraphRecipientType, true
}

// HasLibreGraphRecipientType returns a boolean if a field has been set.
func (o *DriveRecipient) HasLibreGraphRecipientType() bool {
	if o != nil && !IsNil(o.LibreGraphRecipientType) {
		return true
	}

	return false
}

// SetLibreGraphRecipientType gets a reference to the given string and assigns it to the LibreGraphRecipientType field.
func (o *DriveRecipient) SetLibreGraphRecipientType(v string) {
	o.LibreGraphRecipientType = &v
}

func (o DriveRecipient) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DriveRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectId) {
		toSerialize["objectId"] = o.ObjectId
	}
	if !IsNil(o.LibreGraphRecipientType) {
		toSerialize["@libre.graph.recipient.type"] = o.LibreGraphRecipientType
	}
	return toSerialize, nil
}

type NullableDriveRecipient struct {
	value *DriveRecipient
	isSet bool
}

func (v NullableDriveRecipient) Get() *DriveRecipient {
	return v.value
}

func (v *NullableDriveRecipient) Set(val *DriveRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableDriveRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableDriveRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriveRecipient(val *DriveRecipient) *NullableDriveRecipient {
	return &NullableDriveRecipient{value: val, isSet: true}
}

func (v NullableDriveRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriveRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

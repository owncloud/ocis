/*
Libre Graph API

Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.

API version: v1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libregraph

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ActivityTimes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityTimes{}

// ActivityTimes struct for ActivityTimes
type ActivityTimes struct {
	// Timestamp of the activity.
	RecordedTime time.Time `json:"recordedTime"`
}

type _ActivityTimes ActivityTimes

// NewActivityTimes instantiates a new ActivityTimes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityTimes(recordedTime time.Time) *ActivityTimes {
	this := ActivityTimes{}
	this.RecordedTime = recordedTime
	return &this
}

// NewActivityTimesWithDefaults instantiates a new ActivityTimes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityTimesWithDefaults() *ActivityTimes {
	this := ActivityTimes{}
	return &this
}

// GetRecordedTime returns the RecordedTime field value
func (o *ActivityTimes) GetRecordedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RecordedTime
}

// GetRecordedTimeOk returns a tuple with the RecordedTime field value
// and a boolean to check if the value has been set.
func (o *ActivityTimes) GetRecordedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordedTime, true
}

// SetRecordedTime sets field value
func (o *ActivityTimes) SetRecordedTime(v time.Time) {
	o.RecordedTime = v
}

func (o ActivityTimes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityTimes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recordedTime"] = o.RecordedTime
	return toSerialize, nil
}

func (o *ActivityTimes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recordedTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivityTimes := _ActivityTimes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivityTimes)

	if err != nil {
		return err
	}

	*o = ActivityTimes(varActivityTimes)

	return err
}

type NullableActivityTimes struct {
	value *ActivityTimes
	isSet bool
}

func (v NullableActivityTimes) Get() *ActivityTimes {
	return v.value
}

func (v *NullableActivityTimes) Set(val *ActivityTimes) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityTimes) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityTimes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityTimes(val *ActivityTimes) *NullableActivityTimes {
	return &NullableActivityTimes{value: val, isSet: true}
}

func (v NullableActivityTimes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityTimes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

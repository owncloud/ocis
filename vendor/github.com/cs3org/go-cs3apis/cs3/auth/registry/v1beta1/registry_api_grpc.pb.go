// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cs3/auth/registry/v1beta1/registry_api.proto

package registryv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegistryAPI_GetAuthProviders_FullMethodName  = "/cs3.auth.registry.v1beta1.RegistryAPI/GetAuthProviders"
	RegistryAPI_ListAuthProviders_FullMethodName = "/cs3.auth.registry.v1beta1.RegistryAPI/ListAuthProviders"
)

// RegistryAPIClient is the client API for RegistryAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryAPIClient interface {
	// Returns the auth provider that is reponsible for the given
	// resource reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	GetAuthProviders(ctx context.Context, in *GetAuthProvidersRequest, opts ...grpc.CallOption) (*GetAuthProvidersResponse, error)
	// Returns a list of the available auth providers known by this registry.
	ListAuthProviders(ctx context.Context, in *ListAuthProvidersRequest, opts ...grpc.CallOption) (*ListAuthProvidersResponse, error)
}

type registryAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryAPIClient(cc grpc.ClientConnInterface) RegistryAPIClient {
	return &registryAPIClient{cc}
}

func (c *registryAPIClient) GetAuthProviders(ctx context.Context, in *GetAuthProvidersRequest, opts ...grpc.CallOption) (*GetAuthProvidersResponse, error) {
	out := new(GetAuthProvidersResponse)
	err := c.cc.Invoke(ctx, RegistryAPI_GetAuthProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAPIClient) ListAuthProviders(ctx context.Context, in *ListAuthProvidersRequest, opts ...grpc.CallOption) (*ListAuthProvidersResponse, error) {
	out := new(ListAuthProvidersResponse)
	err := c.cc.Invoke(ctx, RegistryAPI_ListAuthProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryAPIServer is the server API for RegistryAPI service.
// All implementations should embed UnimplementedRegistryAPIServer
// for forward compatibility
type RegistryAPIServer interface {
	// Returns the auth provider that is reponsible for the given
	// resource reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	GetAuthProviders(context.Context, *GetAuthProvidersRequest) (*GetAuthProvidersResponse, error)
	// Returns a list of the available auth providers known by this registry.
	ListAuthProviders(context.Context, *ListAuthProvidersRequest) (*ListAuthProvidersResponse, error)
}

// UnimplementedRegistryAPIServer should be embedded to have forward compatible implementations.
type UnimplementedRegistryAPIServer struct {
}

func (UnimplementedRegistryAPIServer) GetAuthProviders(context.Context, *GetAuthProvidersRequest) (*GetAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthProviders not implemented")
}
func (UnimplementedRegistryAPIServer) ListAuthProviders(context.Context, *ListAuthProvidersRequest) (*ListAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthProviders not implemented")
}

// UnsafeRegistryAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryAPIServer will
// result in compilation errors.
type UnsafeRegistryAPIServer interface {
	mustEmbedUnimplementedRegistryAPIServer()
}

func RegisterRegistryAPIServer(s grpc.ServiceRegistrar, srv RegistryAPIServer) {
	s.RegisterService(&RegistryAPI_ServiceDesc, srv)
}

func _RegistryAPI_GetAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAPIServer).GetAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryAPI_GetAuthProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAPIServer).GetAuthProviders(ctx, req.(*GetAuthProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAPI_ListAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAPIServer).ListAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryAPI_ListAuthProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAPIServer).ListAuthProviders(ctx, req.(*ListAuthProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryAPI_ServiceDesc is the grpc.ServiceDesc for RegistryAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.auth.registry.v1beta1.RegistryAPI",
	HandlerType: (*RegistryAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthProviders",
			Handler:    _RegistryAPI_GetAuthProviders_Handler,
		},
		{
			MethodName: "ListAuthProviders",
			Handler:    _RegistryAPI_ListAuthProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/auth/registry/v1beta1/registry_api.proto",
}

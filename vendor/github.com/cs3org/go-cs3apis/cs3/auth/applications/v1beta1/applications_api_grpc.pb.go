// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cs3/auth/applications/v1beta1/applications_api.proto

package applicationsv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApplicationsAPI_GenerateAppPassword_FullMethodName   = "/cs3.auth.applications.v1beta1.ApplicationsAPI/GenerateAppPassword"
	ApplicationsAPI_ListAppPasswords_FullMethodName      = "/cs3.auth.applications.v1beta1.ApplicationsAPI/ListAppPasswords"
	ApplicationsAPI_InvalidateAppPassword_FullMethodName = "/cs3.auth.applications.v1beta1.ApplicationsAPI/InvalidateAppPassword"
	ApplicationsAPI_GetAppPassword_FullMethodName        = "/cs3.auth.applications.v1beta1.ApplicationsAPI/GetAppPassword"
)

// ApplicationsAPIClient is the client API for ApplicationsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsAPIClient interface {
	// GenerateAppPassword creates a password with specified scope to be used by
	// third-party applications.
	GenerateAppPassword(ctx context.Context, in *GenerateAppPasswordRequest, opts ...grpc.CallOption) (*GenerateAppPasswordResponse, error)
	// ListAppPasswords lists the application passwords created by a user.
	ListAppPasswords(ctx context.Context, in *ListAppPasswordsRequest, opts ...grpc.CallOption) (*ListAppPasswordsResponse, error)
	// InvalidateAppPassword invalidates a generated password.
	InvalidateAppPassword(ctx context.Context, in *InvalidateAppPasswordRequest, opts ...grpc.CallOption) (*InvalidateAppPasswordResponse, error)
	// GetAppPassword retrieves the password information by the combination of username and password.
	GetAppPassword(ctx context.Context, in *GetAppPasswordRequest, opts ...grpc.CallOption) (*GetAppPasswordResponse, error)
}

type applicationsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsAPIClient(cc grpc.ClientConnInterface) ApplicationsAPIClient {
	return &applicationsAPIClient{cc}
}

func (c *applicationsAPIClient) GenerateAppPassword(ctx context.Context, in *GenerateAppPasswordRequest, opts ...grpc.CallOption) (*GenerateAppPasswordResponse, error) {
	out := new(GenerateAppPasswordResponse)
	err := c.cc.Invoke(ctx, ApplicationsAPI_GenerateAppPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsAPIClient) ListAppPasswords(ctx context.Context, in *ListAppPasswordsRequest, opts ...grpc.CallOption) (*ListAppPasswordsResponse, error) {
	out := new(ListAppPasswordsResponse)
	err := c.cc.Invoke(ctx, ApplicationsAPI_ListAppPasswords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsAPIClient) InvalidateAppPassword(ctx context.Context, in *InvalidateAppPasswordRequest, opts ...grpc.CallOption) (*InvalidateAppPasswordResponse, error) {
	out := new(InvalidateAppPasswordResponse)
	err := c.cc.Invoke(ctx, ApplicationsAPI_InvalidateAppPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsAPIClient) GetAppPassword(ctx context.Context, in *GetAppPasswordRequest, opts ...grpc.CallOption) (*GetAppPasswordResponse, error) {
	out := new(GetAppPasswordResponse)
	err := c.cc.Invoke(ctx, ApplicationsAPI_GetAppPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsAPIServer is the server API for ApplicationsAPI service.
// All implementations should embed UnimplementedApplicationsAPIServer
// for forward compatibility
type ApplicationsAPIServer interface {
	// GenerateAppPassword creates a password with specified scope to be used by
	// third-party applications.
	GenerateAppPassword(context.Context, *GenerateAppPasswordRequest) (*GenerateAppPasswordResponse, error)
	// ListAppPasswords lists the application passwords created by a user.
	ListAppPasswords(context.Context, *ListAppPasswordsRequest) (*ListAppPasswordsResponse, error)
	// InvalidateAppPassword invalidates a generated password.
	InvalidateAppPassword(context.Context, *InvalidateAppPasswordRequest) (*InvalidateAppPasswordResponse, error)
	// GetAppPassword retrieves the password information by the combination of username and password.
	GetAppPassword(context.Context, *GetAppPasswordRequest) (*GetAppPasswordResponse, error)
}

// UnimplementedApplicationsAPIServer should be embedded to have forward compatible implementations.
type UnimplementedApplicationsAPIServer struct {
}

func (UnimplementedApplicationsAPIServer) GenerateAppPassword(context.Context, *GenerateAppPasswordRequest) (*GenerateAppPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAppPassword not implemented")
}
func (UnimplementedApplicationsAPIServer) ListAppPasswords(context.Context, *ListAppPasswordsRequest) (*ListAppPasswordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppPasswords not implemented")
}
func (UnimplementedApplicationsAPIServer) InvalidateAppPassword(context.Context, *InvalidateAppPasswordRequest) (*InvalidateAppPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAppPassword not implemented")
}
func (UnimplementedApplicationsAPIServer) GetAppPassword(context.Context, *GetAppPasswordRequest) (*GetAppPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPassword not implemented")
}

// UnsafeApplicationsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsAPIServer will
// result in compilation errors.
type UnsafeApplicationsAPIServer interface {
	mustEmbedUnimplementedApplicationsAPIServer()
}

func RegisterApplicationsAPIServer(s grpc.ServiceRegistrar, srv ApplicationsAPIServer) {
	s.RegisterService(&ApplicationsAPI_ServiceDesc, srv)
}

func _ApplicationsAPI_GenerateAppPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAppPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsAPIServer).GenerateAppPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsAPI_GenerateAppPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsAPIServer).GenerateAppPassword(ctx, req.(*GenerateAppPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsAPI_ListAppPasswords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppPasswordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsAPIServer).ListAppPasswords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsAPI_ListAppPasswords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsAPIServer).ListAppPasswords(ctx, req.(*ListAppPasswordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsAPI_InvalidateAppPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateAppPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsAPIServer).InvalidateAppPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsAPI_InvalidateAppPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsAPIServer).InvalidateAppPassword(ctx, req.(*InvalidateAppPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsAPI_GetAppPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsAPIServer).GetAppPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsAPI_GetAppPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsAPIServer).GetAppPassword(ctx, req.(*GetAppPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationsAPI_ServiceDesc is the grpc.ServiceDesc for ApplicationsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.auth.applications.v1beta1.ApplicationsAPI",
	HandlerType: (*ApplicationsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAppPassword",
			Handler:    _ApplicationsAPI_GenerateAppPassword_Handler,
		},
		{
			MethodName: "ListAppPasswords",
			Handler:    _ApplicationsAPI_ListAppPasswords_Handler,
		},
		{
			MethodName: "InvalidateAppPassword",
			Handler:    _ApplicationsAPI_InvalidateAppPassword_Handler,
		},
		{
			MethodName: "GetAppPassword",
			Handler:    _ApplicationsAPI_GetAppPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/auth/applications/v1beta1/applications_api.proto",
}

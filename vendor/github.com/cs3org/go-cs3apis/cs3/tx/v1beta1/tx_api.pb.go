// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cs3/tx/v1beta1/tx_api.proto

package txv1beta1

import (
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/rpc/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/sharing/ocm/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The filter type.
type ListTransfersRequest_Filter_Type int32

const (
	ListTransfersRequest_Filter_TYPE_INVALID  ListTransfersRequest_Filter_Type = 0
	ListTransfersRequest_Filter_TYPE_STATUS   ListTransfersRequest_Filter_Type = 1
	ListTransfersRequest_Filter_TYPE_SHARE_ID ListTransfersRequest_Filter_Type = 2
	ListTransfersRequest_Filter_TYPE_TX_ID    ListTransfersRequest_Filter_Type = 3
)

// Enum value maps for ListTransfersRequest_Filter_Type.
var (
	ListTransfersRequest_Filter_Type_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_STATUS",
		2: "TYPE_SHARE_ID",
		3: "TYPE_TX_ID",
	}
	ListTransfersRequest_Filter_Type_value = map[string]int32{
		"TYPE_INVALID":  0,
		"TYPE_STATUS":   1,
		"TYPE_SHARE_ID": 2,
		"TYPE_TX_ID":    3,
	}
)

func (x ListTransfersRequest_Filter_Type) Enum() *ListTransfersRequest_Filter_Type {
	p := new(ListTransfersRequest_Filter_Type)
	*p = x
	return p
}

func (x ListTransfersRequest_Filter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListTransfersRequest_Filter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_tx_v1beta1_tx_api_proto_enumTypes[0].Descriptor()
}

func (ListTransfersRequest_Filter_Type) Type() protoreflect.EnumType {
	return &file_cs3_tx_v1beta1_tx_api_proto_enumTypes[0]
}

func (x ListTransfersRequest_Filter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListTransfersRequest_Filter_Type.Descriptor instead.
func (ListTransfersRequest_Filter_Type) EnumDescriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{6, 0, 0}
}

type CreateTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The source target URI. Should include at the minimum all the info needed to access the source.
	// https://golang.org/pkg/net/url/#URL provides a quick view of the format.
	SrcTargetUri string `protobuf:"bytes,1,opt,name=src_target_uri,json=srcTargetUri,proto3" json:"src_target_uri,omitempty"`
	// REQUIRED.
	// The destination target URI. Should include at the minimum all the info needed to access the destination.
	// https://golang.org/pkg/net/url/#URL provides a quick view of the format.
	DestTargetUri string `protobuf:"bytes,2,opt,name=dest_target_uri,json=destTargetUri,proto3" json:"dest_target_uri,omitempty"`
	// REQUIRED.
	// The share Id of the share this transfer is based on.
	ShareId *v1beta1.ShareId `protobuf:"bytes,3,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,4,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *CreateTransferRequest) Reset() {
	*x = CreateTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferRequest) ProtoMessage() {}

func (x *CreateTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferRequest) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTransferRequest) GetSrcTargetUri() string {
	if x != nil {
		return x.SrcTargetUri
	}
	return ""
}

func (x *CreateTransferRequest) GetDestTargetUri() string {
	if x != nil {
		return x.DestTargetUri
	}
	return ""
}

func (x *CreateTransferRequest) GetShareId() *v1beta1.ShareId {
	if x != nil {
		return x.ShareId
	}
	return nil
}

func (x *CreateTransferRequest) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type CreateTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// REQUIRED.
	// TxInfo, includes transfer id, status, description.
	TxInfo *TxInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,3,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *CreateTransferResponse) Reset() {
	*x = CreateTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferResponse) ProtoMessage() {}

func (x *CreateTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferResponse.ProtoReflect.Descriptor instead.
func (*CreateTransferResponse) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTransferResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateTransferResponse) GetTxInfo() *TxInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *CreateTransferResponse) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GetTransferStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The transfer identifier.
	TxId *TxId `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *GetTransferStatusRequest) Reset() {
	*x = GetTransferStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferStatusRequest) ProtoMessage() {}

func (x *GetTransferStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTransferStatusRequest) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetTransferStatusRequest) GetTxId() *TxId {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *GetTransferStatusRequest) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GetTransferStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// REQUIRED.
	// TxInfo, includes ao. transfer id, status, description.
	TxInfo *TxInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,3,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *GetTransferStatusResponse) Reset() {
	*x = GetTransferStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferStatusResponse) ProtoMessage() {}

func (x *GetTransferStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTransferStatusResponse) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetTransferStatusResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetTransferStatusResponse) GetTxInfo() *TxInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *GetTransferStatusResponse) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type CancelTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The transfer identifier.
	TxId *TxId `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *CancelTransferRequest) Reset() {
	*x = CancelTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransferRequest) ProtoMessage() {}

func (x *CancelTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransferRequest.ProtoReflect.Descriptor instead.
func (*CancelTransferRequest) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{4}
}

func (x *CancelTransferRequest) GetTxId() *TxId {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *CancelTransferRequest) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type CancelTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// REQUIRED.
	// TxInfo, includes ao. transfer id, status, description.
	TxInfo *TxInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,3,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *CancelTransferResponse) Reset() {
	*x = CancelTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransferResponse) ProtoMessage() {}

func (x *CancelTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransferResponse.ProtoReflect.Descriptor instead.
func (*CancelTransferResponse) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{5}
}

func (x *CancelTransferResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CancelTransferResponse) GetTxInfo() *TxInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *CancelTransferResponse) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type ListTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// OPTIONAL.
	// The list of filters to apply if any.
	Filters []*ListTransfersRequest_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListTransfersRequest) Reset() {
	*x = ListTransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersRequest) ProtoMessage() {}

func (x *ListTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersRequest) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{6}
}

func (x *ListTransfersRequest) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListTransfersRequest) GetFilters() []*ListTransfersRequest_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// REQUIRED.
	// List of TxInfo types representing transfers.
	Transfers []*TxInfo `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,3,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *ListTransfersResponse) Reset() {
	*x = ListTransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersResponse) ProtoMessage() {}

func (x *ListTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListTransfersResponse) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{7}
}

func (x *ListTransfersResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListTransfersResponse) GetTransfers() []*TxInfo {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *ListTransfersResponse) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type RetryTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The transfer identifier.
	TxId *TxId `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *RetryTransferRequest) Reset() {
	*x = RetryTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTransferRequest) ProtoMessage() {}

func (x *RetryTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTransferRequest.ProtoReflect.Descriptor instead.
func (*RetryTransferRequest) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{8}
}

func (x *RetryTransferRequest) GetTxId() *TxId {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *RetryTransferRequest) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type RetryTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// REQUIRED.
	// TxInfo, includes ao. transfer id, status, description.
	TxInfo *TxInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta11.Opaque `protobuf:"bytes,3,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *RetryTransferResponse) Reset() {
	*x = RetryTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTransferResponse) ProtoMessage() {}

func (x *RetryTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTransferResponse.ProtoReflect.Descriptor instead.
func (*RetryTransferResponse) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{9}
}

func (x *RetryTransferResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RetryTransferResponse) GetTxInfo() *TxInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *RetryTransferResponse) GetOpaque() *v1beta11.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

// REQUIRED.
// Represents a filter to apply to the request.
type ListTransfersRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	Type ListTransfersRequest_Filter_Type `protobuf:"varint,1,opt,name=type,proto3,enum=cs3.tx.v1beta1.ListTransfersRequest_Filter_Type" json:"type,omitempty"`
	// REQUIRED.
	//
	// Types that are assignable to Term:
	//
	//	*ListTransfersRequest_Filter_Status
	//	*ListTransfersRequest_Filter_ShareId
	//	*ListTransfersRequest_Filter_TxId
	Term isListTransfersRequest_Filter_Term `protobuf_oneof:"term"`
}

func (x *ListTransfersRequest_Filter) Reset() {
	*x = ListTransfersRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTransfersRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersRequest_Filter) ProtoMessage() {}

func (x *ListTransfersRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_tx_v1beta1_tx_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListTransfersRequest_Filter) Descriptor() ([]byte, []int) {
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ListTransfersRequest_Filter) GetType() ListTransfersRequest_Filter_Type {
	if x != nil {
		return x.Type
	}
	return ListTransfersRequest_Filter_TYPE_INVALID
}

func (m *ListTransfersRequest_Filter) GetTerm() isListTransfersRequest_Filter_Term {
	if m != nil {
		return m.Term
	}
	return nil
}

func (x *ListTransfersRequest_Filter) GetStatus() Status {
	if x, ok := x.GetTerm().(*ListTransfersRequest_Filter_Status); ok {
		return x.Status
	}
	return Status_STATUS_INVALID
}

func (x *ListTransfersRequest_Filter) GetShareId() *v1beta1.ShareId {
	if x, ok := x.GetTerm().(*ListTransfersRequest_Filter_ShareId); ok {
		return x.ShareId
	}
	return nil
}

func (x *ListTransfersRequest_Filter) GetTxId() *TxId {
	if x, ok := x.GetTerm().(*ListTransfersRequest_Filter_TxId); ok {
		return x.TxId
	}
	return nil
}

type isListTransfersRequest_Filter_Term interface {
	isListTransfersRequest_Filter_Term()
}

type ListTransfersRequest_Filter_Status struct {
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=cs3.tx.v1beta1.Status,oneof"`
}

type ListTransfersRequest_Filter_ShareId struct {
	ShareId *v1beta1.ShareId `protobuf:"bytes,3,opt,name=share_id,json=shareId,proto3,oneof"`
}

type ListTransfersRequest_Filter_TxId struct {
	TxId *TxId `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3,oneof"`
}

func (*ListTransfersRequest_Filter_Status) isListTransfersRequest_Filter_Term() {}

func (*ListTransfersRequest_Filter_ShareId) isListTransfersRequest_Filter_Term() {}

func (*ListTransfersRequest_Filter_TxId) isListTransfersRequest_Filter_Term() {}

var File_cs3_tx_v1beta1_tx_api_proto protoreflect.FileDescriptor

var file_cs3_tx_v1beta1_tx_api_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x73, 0x33, 0x2f, 0x74, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x74, 0x78, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63,
	0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1c, 0x63,
	0x73, 0x33, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63, 0x73, 0x33,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x6d, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x73, 0x33, 0x2f, 0x74, 0x78, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x73, 0x33, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x69, 0x12, 0x3b, 0x0a, 0x08, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x64, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0x75, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x54, 0x78, 0x49, 0x64, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22,
	0xad, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22,
	0xd5, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0xc2, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x63, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x64, 0x48, 0x00, 0x52, 0x04, 0x74, 0x78, 0x49,
	0x64, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x22, 0x74, 0x0a, 0x14, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x64, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x32, 0xef, 0x03, 0x0a, 0x05, 0x54, 0x78, 0x41, 0x50, 0x49, 0x12, 0x5f, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0xb1, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74,
	0x78, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x54, 0x78, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x33, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x73,
	0x33, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x73, 0x33, 0x2f, 0x74, 0x78, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x3b, 0x74, 0x78, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02,
	0x03, 0x43, 0x54, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x73, 0x33, 0x2e, 0x54, 0x78, 0x2e, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x0e, 0x43, 0x73, 0x33, 0x5c, 0x54, 0x78, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1a, 0x43, 0x73, 0x33, 0x5c, 0x54, 0x78, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x73, 0x33, 0x3a, 0x3a, 0x54, 0x78, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs3_tx_v1beta1_tx_api_proto_rawDescOnce sync.Once
	file_cs3_tx_v1beta1_tx_api_proto_rawDescData = file_cs3_tx_v1beta1_tx_api_proto_rawDesc
)

func file_cs3_tx_v1beta1_tx_api_proto_rawDescGZIP() []byte {
	file_cs3_tx_v1beta1_tx_api_proto_rawDescOnce.Do(func() {
		file_cs3_tx_v1beta1_tx_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs3_tx_v1beta1_tx_api_proto_rawDescData)
	})
	return file_cs3_tx_v1beta1_tx_api_proto_rawDescData
}

var file_cs3_tx_v1beta1_tx_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cs3_tx_v1beta1_tx_api_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cs3_tx_v1beta1_tx_api_proto_goTypes = []interface{}{
	(ListTransfersRequest_Filter_Type)(0), // 0: cs3.tx.v1beta1.ListTransfersRequest.Filter.Type
	(*CreateTransferRequest)(nil),         // 1: cs3.tx.v1beta1.CreateTransferRequest
	(*CreateTransferResponse)(nil),        // 2: cs3.tx.v1beta1.CreateTransferResponse
	(*GetTransferStatusRequest)(nil),      // 3: cs3.tx.v1beta1.GetTransferStatusRequest
	(*GetTransferStatusResponse)(nil),     // 4: cs3.tx.v1beta1.GetTransferStatusResponse
	(*CancelTransferRequest)(nil),         // 5: cs3.tx.v1beta1.CancelTransferRequest
	(*CancelTransferResponse)(nil),        // 6: cs3.tx.v1beta1.CancelTransferResponse
	(*ListTransfersRequest)(nil),          // 7: cs3.tx.v1beta1.ListTransfersRequest
	(*ListTransfersResponse)(nil),         // 8: cs3.tx.v1beta1.ListTransfersResponse
	(*RetryTransferRequest)(nil),          // 9: cs3.tx.v1beta1.RetryTransferRequest
	(*RetryTransferResponse)(nil),         // 10: cs3.tx.v1beta1.RetryTransferResponse
	(*ListTransfersRequest_Filter)(nil),   // 11: cs3.tx.v1beta1.ListTransfersRequest.Filter
	(*v1beta1.ShareId)(nil),               // 12: cs3.sharing.ocm.v1beta1.ShareId
	(*v1beta11.Opaque)(nil),               // 13: cs3.types.v1beta1.Opaque
	(*v1beta12.Status)(nil),               // 14: cs3.rpc.v1beta1.Status
	(*TxInfo)(nil),                        // 15: cs3.tx.v1beta1.TxInfo
	(*TxId)(nil),                          // 16: cs3.tx.v1beta1.TxId
	(Status)(0),                           // 17: cs3.tx.v1beta1.Status
}
var file_cs3_tx_v1beta1_tx_api_proto_depIdxs = []int32{
	12, // 0: cs3.tx.v1beta1.CreateTransferRequest.share_id:type_name -> cs3.sharing.ocm.v1beta1.ShareId
	13, // 1: cs3.tx.v1beta1.CreateTransferRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	14, // 2: cs3.tx.v1beta1.CreateTransferResponse.status:type_name -> cs3.rpc.v1beta1.Status
	15, // 3: cs3.tx.v1beta1.CreateTransferResponse.tx_info:type_name -> cs3.tx.v1beta1.TxInfo
	13, // 4: cs3.tx.v1beta1.CreateTransferResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	16, // 5: cs3.tx.v1beta1.GetTransferStatusRequest.tx_id:type_name -> cs3.tx.v1beta1.TxId
	13, // 6: cs3.tx.v1beta1.GetTransferStatusRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	14, // 7: cs3.tx.v1beta1.GetTransferStatusResponse.status:type_name -> cs3.rpc.v1beta1.Status
	15, // 8: cs3.tx.v1beta1.GetTransferStatusResponse.tx_info:type_name -> cs3.tx.v1beta1.TxInfo
	13, // 9: cs3.tx.v1beta1.GetTransferStatusResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	16, // 10: cs3.tx.v1beta1.CancelTransferRequest.tx_id:type_name -> cs3.tx.v1beta1.TxId
	13, // 11: cs3.tx.v1beta1.CancelTransferRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	14, // 12: cs3.tx.v1beta1.CancelTransferResponse.status:type_name -> cs3.rpc.v1beta1.Status
	15, // 13: cs3.tx.v1beta1.CancelTransferResponse.tx_info:type_name -> cs3.tx.v1beta1.TxInfo
	13, // 14: cs3.tx.v1beta1.CancelTransferResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	13, // 15: cs3.tx.v1beta1.ListTransfersRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	11, // 16: cs3.tx.v1beta1.ListTransfersRequest.filters:type_name -> cs3.tx.v1beta1.ListTransfersRequest.Filter
	14, // 17: cs3.tx.v1beta1.ListTransfersResponse.status:type_name -> cs3.rpc.v1beta1.Status
	15, // 18: cs3.tx.v1beta1.ListTransfersResponse.transfers:type_name -> cs3.tx.v1beta1.TxInfo
	13, // 19: cs3.tx.v1beta1.ListTransfersResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	16, // 20: cs3.tx.v1beta1.RetryTransferRequest.tx_id:type_name -> cs3.tx.v1beta1.TxId
	13, // 21: cs3.tx.v1beta1.RetryTransferRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	14, // 22: cs3.tx.v1beta1.RetryTransferResponse.status:type_name -> cs3.rpc.v1beta1.Status
	15, // 23: cs3.tx.v1beta1.RetryTransferResponse.tx_info:type_name -> cs3.tx.v1beta1.TxInfo
	13, // 24: cs3.tx.v1beta1.RetryTransferResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	0,  // 25: cs3.tx.v1beta1.ListTransfersRequest.Filter.type:type_name -> cs3.tx.v1beta1.ListTransfersRequest.Filter.Type
	17, // 26: cs3.tx.v1beta1.ListTransfersRequest.Filter.status:type_name -> cs3.tx.v1beta1.Status
	12, // 27: cs3.tx.v1beta1.ListTransfersRequest.Filter.share_id:type_name -> cs3.sharing.ocm.v1beta1.ShareId
	16, // 28: cs3.tx.v1beta1.ListTransfersRequest.Filter.tx_id:type_name -> cs3.tx.v1beta1.TxId
	1,  // 29: cs3.tx.v1beta1.TxAPI.CreateTransfer:input_type -> cs3.tx.v1beta1.CreateTransferRequest
	3,  // 30: cs3.tx.v1beta1.TxAPI.GetTransferStatus:input_type -> cs3.tx.v1beta1.GetTransferStatusRequest
	5,  // 31: cs3.tx.v1beta1.TxAPI.CancelTransfer:input_type -> cs3.tx.v1beta1.CancelTransferRequest
	7,  // 32: cs3.tx.v1beta1.TxAPI.ListTransfers:input_type -> cs3.tx.v1beta1.ListTransfersRequest
	9,  // 33: cs3.tx.v1beta1.TxAPI.RetryTransfer:input_type -> cs3.tx.v1beta1.RetryTransferRequest
	2,  // 34: cs3.tx.v1beta1.TxAPI.CreateTransfer:output_type -> cs3.tx.v1beta1.CreateTransferResponse
	4,  // 35: cs3.tx.v1beta1.TxAPI.GetTransferStatus:output_type -> cs3.tx.v1beta1.GetTransferStatusResponse
	6,  // 36: cs3.tx.v1beta1.TxAPI.CancelTransfer:output_type -> cs3.tx.v1beta1.CancelTransferResponse
	8,  // 37: cs3.tx.v1beta1.TxAPI.ListTransfers:output_type -> cs3.tx.v1beta1.ListTransfersResponse
	10, // 38: cs3.tx.v1beta1.TxAPI.RetryTransfer:output_type -> cs3.tx.v1beta1.RetryTransferResponse
	34, // [34:39] is the sub-list for method output_type
	29, // [29:34] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_cs3_tx_v1beta1_tx_api_proto_init() }
func file_cs3_tx_v1beta1_tx_api_proto_init() {
	if File_cs3_tx_v1beta1_tx_api_proto != nil {
		return
	}
	file_cs3_tx_v1beta1_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_tx_v1beta1_tx_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTransfersRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cs3_tx_v1beta1_tx_api_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ListTransfersRequest_Filter_Status)(nil),
		(*ListTransfersRequest_Filter_ShareId)(nil),
		(*ListTransfersRequest_Filter_TxId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs3_tx_v1beta1_tx_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cs3_tx_v1beta1_tx_api_proto_goTypes,
		DependencyIndexes: file_cs3_tx_v1beta1_tx_api_proto_depIdxs,
		EnumInfos:         file_cs3_tx_v1beta1_tx_api_proto_enumTypes,
		MessageInfos:      file_cs3_tx_v1beta1_tx_api_proto_msgTypes,
	}.Build()
	File_cs3_tx_v1beta1_tx_api_proto = out.File
	file_cs3_tx_v1beta1_tx_api_proto_rawDesc = nil
	file_cs3_tx_v1beta1_tx_api_proto_goTypes = nil
	file_cs3_tx_v1beta1_tx_api_proto_depIdxs = nil
}

// Copyright 2018-2023 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cs3/sharing/link/v1beta1/link_api.proto

package linkv1beta1

import (
	v1beta13 "github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/rpc/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// REQUIRED.
type UpdatePublicShareRequest_Update_Type int32

const (
	UpdatePublicShareRequest_Update_TYPE_INVALID                      UpdatePublicShareRequest_Update_Type = 0
	UpdatePublicShareRequest_Update_TYPE_PERMISSIONS                  UpdatePublicShareRequest_Update_Type = 1
	UpdatePublicShareRequest_Update_TYPE_PASSWORD                     UpdatePublicShareRequest_Update_Type = 2
	UpdatePublicShareRequest_Update_TYPE_EXPIRATION                   UpdatePublicShareRequest_Update_Type = 3
	UpdatePublicShareRequest_Update_TYPE_DISPLAYNAME                  UpdatePublicShareRequest_Update_Type = 4
	UpdatePublicShareRequest_Update_TYPE_DESCRIPTION                  UpdatePublicShareRequest_Update_Type = 5
	UpdatePublicShareRequest_Update_TYPE_NOTIFYUPLOADS                UpdatePublicShareRequest_Update_Type = 6
	UpdatePublicShareRequest_Update_TYPE_NOTIFYUPLOADSEXTRARECIPIENTS UpdatePublicShareRequest_Update_Type = 7
)

// Enum value maps for UpdatePublicShareRequest_Update_Type.
var (
	UpdatePublicShareRequest_Update_Type_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_PERMISSIONS",
		2: "TYPE_PASSWORD",
		3: "TYPE_EXPIRATION",
		4: "TYPE_DISPLAYNAME",
		5: "TYPE_DESCRIPTION",
		6: "TYPE_NOTIFYUPLOADS",
		7: "TYPE_NOTIFYUPLOADSEXTRARECIPIENTS",
	}
	UpdatePublicShareRequest_Update_Type_value = map[string]int32{
		"TYPE_INVALID":                      0,
		"TYPE_PERMISSIONS":                  1,
		"TYPE_PASSWORD":                     2,
		"TYPE_EXPIRATION":                   3,
		"TYPE_DISPLAYNAME":                  4,
		"TYPE_DESCRIPTION":                  5,
		"TYPE_NOTIFYUPLOADS":                6,
		"TYPE_NOTIFYUPLOADSEXTRARECIPIENTS": 7,
	}
)

func (x UpdatePublicShareRequest_Update_Type) Enum() *UpdatePublicShareRequest_Update_Type {
	p := new(UpdatePublicShareRequest_Update_Type)
	*p = x
	return p
}

func (x UpdatePublicShareRequest_Update_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdatePublicShareRequest_Update_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_sharing_link_v1beta1_link_api_proto_enumTypes[0].Descriptor()
}

func (UpdatePublicShareRequest_Update_Type) Type() protoreflect.EnumType {
	return &file_cs3_sharing_link_v1beta1_link_api_proto_enumTypes[0]
}

func (x UpdatePublicShareRequest_Update_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdatePublicShareRequest_Update_Type.Descriptor instead.
func (UpdatePublicShareRequest_Update_Type) EnumDescriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{2, 0, 0}
}

// REQUIRED.
type ListPublicSharesRequest_Filter_Type int32

const (
	ListPublicSharesRequest_Filter_TYPE_INVALID     ListPublicSharesRequest_Filter_Type = 0
	ListPublicSharesRequest_Filter_TYPE_RESOURCE_ID ListPublicSharesRequest_Filter_Type = 1
	ListPublicSharesRequest_Filter_TYPE_OWNER       ListPublicSharesRequest_Filter_Type = 2
	ListPublicSharesRequest_Filter_TYPE_CREATOR     ListPublicSharesRequest_Filter_Type = 3
)

// Enum value maps for ListPublicSharesRequest_Filter_Type.
var (
	ListPublicSharesRequest_Filter_Type_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_RESOURCE_ID",
		2: "TYPE_OWNER",
		3: "TYPE_CREATOR",
	}
	ListPublicSharesRequest_Filter_Type_value = map[string]int32{
		"TYPE_INVALID":     0,
		"TYPE_RESOURCE_ID": 1,
		"TYPE_OWNER":       2,
		"TYPE_CREATOR":     3,
	}
)

func (x ListPublicSharesRequest_Filter_Type) Enum() *ListPublicSharesRequest_Filter_Type {
	p := new(ListPublicSharesRequest_Filter_Type)
	*p = x
	return p
}

func (x ListPublicSharesRequest_Filter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListPublicSharesRequest_Filter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_sharing_link_v1beta1_link_api_proto_enumTypes[1].Descriptor()
}

func (ListPublicSharesRequest_Filter_Type) Type() protoreflect.EnumType {
	return &file_cs3_sharing_link_v1beta1_link_api_proto_enumTypes[1]
}

func (x ListPublicSharesRequest_Filter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListPublicSharesRequest_Filter_Type.Descriptor instead.
func (ListPublicSharesRequest_Filter_Type) EnumDescriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{4, 0, 0}
}

type CreatePublicShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The unique identifier for the shared storage resource.
	ResourceInfo *v1beta11.ResourceInfo `protobuf:"bytes,2,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	// REQUIRED.
	// The restrictions to apply to the share.
	Grant *Grant `protobuf:"bytes,3,opt,name=grant,proto3" json:"grant,omitempty"`
	// OPTIONAL
	// The description to add to the share.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// OPTIONAL
	// Indicates a share used for internal usage,
	// not exposed by a ListPublicShares.
	Internal bool `protobuf:"varint,5,opt,name=internal,proto3" json:"internal,omitempty"`
	// OPTIONAL
	// Whether to notify the owner of a share when a file is uploaded to it.
	NotifyUploads bool `protobuf:"varint,6,opt,name=notify_uploads,json=notifyUploads,proto3" json:"notify_uploads,omitempty"`
	// OPTIONAL
	// Comma-separated list of extra email addresses to notify when a file is
	// uploaded to the share.
	NotifyUploadsExtraRecipients string `protobuf:"bytes,7,opt,name=notify_uploads_extra_recipients,json=notifyUploadsExtraRecipients,proto3" json:"notify_uploads_extra_recipients,omitempty"`
}

func (x *CreatePublicShareRequest) Reset() {
	*x = CreatePublicShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublicShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublicShareRequest) ProtoMessage() {}

func (x *CreatePublicShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublicShareRequest.ProtoReflect.Descriptor instead.
func (*CreatePublicShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePublicShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *CreatePublicShareRequest) GetResourceInfo() *v1beta11.ResourceInfo {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

func (x *CreatePublicShareRequest) GetGrant() *Grant {
	if x != nil {
		return x.Grant
	}
	return nil
}

func (x *CreatePublicShareRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePublicShareRequest) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *CreatePublicShareRequest) GetNotifyUploads() bool {
	if x != nil {
		return x.NotifyUploads
	}
	return false
}

func (x *CreatePublicShareRequest) GetNotifyUploadsExtraRecipients() string {
	if x != nil {
		return x.NotifyUploadsExtraRecipients
	}
	return ""
}

type CreatePublicShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The created share.
	Share *PublicShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *CreatePublicShareResponse) Reset() {
	*x = CreatePublicShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublicShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublicShareResponse) ProtoMessage() {}

func (x *CreatePublicShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublicShareResponse.ProtoReflect.Descriptor instead.
func (*CreatePublicShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePublicShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreatePublicShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *CreatePublicShareResponse) GetShare() *PublicShare {
	if x != nil {
		return x.Share
	}
	return nil
}

type UpdatePublicShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"` // REQUIRED.
	// REQUIRED.
	// The reference to the public share.
	Ref    *PublicShareReference            `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"` // Available fields to update.
	Update *UpdatePublicShareRequest_Update `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *UpdatePublicShareRequest) Reset() {
	*x = UpdatePublicShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublicShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicShareRequest) ProtoMessage() {}

func (x *UpdatePublicShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicShareRequest.ProtoReflect.Descriptor instead.
func (*UpdatePublicShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatePublicShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *UpdatePublicShareRequest) GetRef() *PublicShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *UpdatePublicShareRequest) GetUpdate() *UpdatePublicShareRequest_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

type UpdatePublicShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The updated public share.
	Share *PublicShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *UpdatePublicShareResponse) Reset() {
	*x = UpdatePublicShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublicShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicShareResponse) ProtoMessage() {}

func (x *UpdatePublicShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicShareResponse.ProtoReflect.Descriptor instead.
func (*UpdatePublicShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatePublicShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdatePublicShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *UpdatePublicShareResponse) GetShare() *PublicShare {
	if x != nil {
		return x.Share
	}
	return nil
}

type ListPublicSharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// OPTIONAL.
	// The list of filters to apply if any.
	Filters []*ListPublicSharesRequest_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// OPTIONAL.
	// If a signature should be included in the share.
	Sign bool `protobuf:"varint,3,opt,name=sign,proto3" json:"sign,omitempty"`
	// OPTIONAL.
	// Clients use this field to specify the maximum number of results to be returned by the server.
	// The server may further constrain the maximum number of results returned in a single page.
	// If the page_size is 0, the server will decide the number of results to be returned.
	// see https://cloud.google.com/apis/design/design_patterns#list_pagination
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// OPTIONAL.
	// The client uses this field to request a specific page of the list results.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPublicSharesRequest) Reset() {
	*x = ListPublicSharesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicSharesRequest) ProtoMessage() {}

func (x *ListPublicSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicSharesRequest.ProtoReflect.Descriptor instead.
func (*ListPublicSharesRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{4}
}

func (x *ListPublicSharesRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListPublicSharesRequest) GetFilters() []*ListPublicSharesRequest_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListPublicSharesRequest) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

func (x *ListPublicSharesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPublicSharesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPublicSharesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The list of shares.
	Share []*PublicShare `protobuf:"bytes,3,rep,name=share,proto3" json:"share,omitempty"`
	// OPTIONAL.
	// This field represents the pagination token to retrieve the next page of results.
	// If the value is "", it means no further results for the request.
	// see https://cloud.google.com/apis/design/design_patterns#list_pagination
	NextPageToken string `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPublicSharesResponse) Reset() {
	*x = ListPublicSharesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicSharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicSharesResponse) ProtoMessage() {}

func (x *ListPublicSharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicSharesResponse.ProtoReflect.Descriptor instead.
func (*ListPublicSharesResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListPublicSharesResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListPublicSharesResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *ListPublicSharesResponse) GetShare() []*PublicShare {
	if x != nil {
		return x.Share
	}
	return nil
}

func (x *ListPublicSharesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type RemovePublicShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *PublicShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *RemovePublicShareRequest) Reset() {
	*x = RemovePublicShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePublicShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePublicShareRequest) ProtoMessage() {}

func (x *RemovePublicShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePublicShareRequest.ProtoReflect.Descriptor instead.
func (*RemovePublicShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{6}
}

func (x *RemovePublicShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *RemovePublicShareRequest) GetRef() *PublicShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type RemovePublicShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
}

func (x *RemovePublicShareResponse) Reset() {
	*x = RemovePublicShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePublicShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePublicShareResponse) ProtoMessage() {}

func (x *RemovePublicShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePublicShareResponse.ProtoReflect.Descriptor instead.
func (*RemovePublicShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{7}
}

func (x *RemovePublicShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RemovePublicShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

type GetPublicShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The reference to which the action should be performed.
	Ref *PublicShareReference `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// OPTIONAL.
	// If a signature should be included in the share.
	Sign bool `protobuf:"varint,3,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *GetPublicShareRequest) Reset() {
	*x = GetPublicShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicShareRequest) ProtoMessage() {}

func (x *GetPublicShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicShareRequest.ProtoReflect.Descriptor instead.
func (*GetPublicShareRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetPublicShareRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetPublicShareRequest) GetRef() *PublicShareReference {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *GetPublicShareRequest) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

type GetPublicShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share *PublicShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *GetPublicShareResponse) Reset() {
	*x = GetPublicShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicShareResponse) ProtoMessage() {}

func (x *GetPublicShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicShareResponse.ProtoReflect.Descriptor instead.
func (*GetPublicShareResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetPublicShareResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetPublicShareResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetPublicShareResponse) GetShare() *PublicShare {
	if x != nil {
		return x.Share
	}
	return nil
}

type GetPublicShareByTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,1,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The unlisted token to identify the public share.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// OPTIONAL.
	// The public link can require authentication.
	Authentication *PublicShareAuthentication `protobuf:"bytes,3,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// OPTIONAL.
	// If a signature should be included in the share.
	Sign bool `protobuf:"varint,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *GetPublicShareByTokenRequest) Reset() {
	*x = GetPublicShareByTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicShareByTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicShareByTokenRequest) ProtoMessage() {}

func (x *GetPublicShareByTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicShareByTokenRequest.ProtoReflect.Descriptor instead.
func (*GetPublicShareByTokenRequest) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetPublicShareByTokenRequest) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetPublicShareByTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetPublicShareByTokenRequest) GetAuthentication() *PublicShareAuthentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *GetPublicShareByTokenRequest) GetSign() bool {
	if x != nil {
		return x.Sign
	}
	return false
}

type GetPublicShareByTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The response status.
	Status *v1beta12.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// OPTIONAL.
	// Opaque information.
	Opaque *v1beta1.Opaque `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	// REQUIRED.
	// The share.
	Share *PublicShare `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	// OPTIONAL.
	// The share password hash.
	//
	// Deprecated: Marked as deprecated in cs3/sharing/link/v1beta1/link_api.proto.
	PasswordHash string `protobuf:"bytes,4,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
}

func (x *GetPublicShareByTokenResponse) Reset() {
	*x = GetPublicShareByTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicShareByTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicShareByTokenResponse) ProtoMessage() {}

func (x *GetPublicShareByTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicShareByTokenResponse.ProtoReflect.Descriptor instead.
func (*GetPublicShareByTokenResponse) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetPublicShareByTokenResponse) GetStatus() *v1beta12.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetPublicShareByTokenResponse) GetOpaque() *v1beta1.Opaque {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *GetPublicShareByTokenResponse) GetShare() *PublicShare {
	if x != nil {
		return x.Share
	}
	return nil
}

// Deprecated: Marked as deprecated in cs3/sharing/link/v1beta1/link_api.proto.
func (x *GetPublicShareByTokenResponse) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

// REQUIRED.
type UpdatePublicShareRequest_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// Defines the field to update.
	Type UpdatePublicShareRequest_Update_Type `protobuf:"varint,3,opt,name=type,proto3,enum=cs3.sharing.link.v1beta1.UpdatePublicShareRequest_Update_Type" json:"type,omitempty"`
	// REQUIRED.
	// Contains the field that will be updated.
	Grant *Grant `protobuf:"bytes,4,opt,name=grant,proto3" json:"grant,omitempty"`
	// OPTIONAL
	// Defines the public link display name.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// OPTIONAL
	// Defines the public link description.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// OPTIONAL
	// Whether to notify the owner of a share when a file is uploaded to it.
	NotifyUploads bool `protobuf:"varint,7,opt,name=notify_uploads,json=notifyUploads,proto3" json:"notify_uploads,omitempty"`
	// OPTIONAL
	// Comma-separated list of extra email addresses to notify when a file is
	// uploaded to the share.
	NotifyUploadsExtraRecipients string `protobuf:"bytes,8,opt,name=notify_uploads_extra_recipients,json=notifyUploadsExtraRecipients,proto3" json:"notify_uploads_extra_recipients,omitempty"`
}

func (x *UpdatePublicShareRequest_Update) Reset() {
	*x = UpdatePublicShareRequest_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublicShareRequest_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicShareRequest_Update) ProtoMessage() {}

func (x *UpdatePublicShareRequest_Update) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicShareRequest_Update.ProtoReflect.Descriptor instead.
func (*UpdatePublicShareRequest_Update) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{2, 0}
}

func (x *UpdatePublicShareRequest_Update) GetType() UpdatePublicShareRequest_Update_Type {
	if x != nil {
		return x.Type
	}
	return UpdatePublicShareRequest_Update_TYPE_INVALID
}

func (x *UpdatePublicShareRequest_Update) GetGrant() *Grant {
	if x != nil {
		return x.Grant
	}
	return nil
}

func (x *UpdatePublicShareRequest_Update) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdatePublicShareRequest_Update) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdatePublicShareRequest_Update) GetNotifyUploads() bool {
	if x != nil {
		return x.NotifyUploads
	}
	return false
}

func (x *UpdatePublicShareRequest_Update) GetNotifyUploadsExtraRecipients() string {
	if x != nil {
		return x.NotifyUploadsExtraRecipients
	}
	return ""
}

// REQUIRED.
// represents a filter to apply to the request.
type ListPublicSharesRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ListPublicSharesRequest_Filter_Type `protobuf:"varint,2,opt,name=type,proto3,enum=cs3.sharing.link.v1beta1.ListPublicSharesRequest_Filter_Type" json:"type,omitempty"`
	// Types that are assignable to Term:
	//
	//	*ListPublicSharesRequest_Filter_ResourceId
	//	*ListPublicSharesRequest_Filter_Owner
	//	*ListPublicSharesRequest_Filter_Creator
	Term isListPublicSharesRequest_Filter_Term `protobuf_oneof:"term"`
}

func (x *ListPublicSharesRequest_Filter) Reset() {
	*x = ListPublicSharesRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicSharesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicSharesRequest_Filter) ProtoMessage() {}

func (x *ListPublicSharesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicSharesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListPublicSharesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListPublicSharesRequest_Filter) GetType() ListPublicSharesRequest_Filter_Type {
	if x != nil {
		return x.Type
	}
	return ListPublicSharesRequest_Filter_TYPE_INVALID
}

func (m *ListPublicSharesRequest_Filter) GetTerm() isListPublicSharesRequest_Filter_Term {
	if m != nil {
		return m.Term
	}
	return nil
}

func (x *ListPublicSharesRequest_Filter) GetResourceId() *v1beta11.ResourceId {
	if x, ok := x.GetTerm().(*ListPublicSharesRequest_Filter_ResourceId); ok {
		return x.ResourceId
	}
	return nil
}

func (x *ListPublicSharesRequest_Filter) GetOwner() *v1beta13.UserId {
	if x, ok := x.GetTerm().(*ListPublicSharesRequest_Filter_Owner); ok {
		return x.Owner
	}
	return nil
}

func (x *ListPublicSharesRequest_Filter) GetCreator() *v1beta13.UserId {
	if x, ok := x.GetTerm().(*ListPublicSharesRequest_Filter_Creator); ok {
		return x.Creator
	}
	return nil
}

type isListPublicSharesRequest_Filter_Term interface {
	isListPublicSharesRequest_Filter_Term()
}

type ListPublicSharesRequest_Filter_ResourceId struct {
	ResourceId *v1beta11.ResourceId `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3,oneof"`
}

type ListPublicSharesRequest_Filter_Owner struct {
	Owner *v1beta13.UserId `protobuf:"bytes,4,opt,name=owner,proto3,oneof"`
}

type ListPublicSharesRequest_Filter_Creator struct {
	Creator *v1beta13.UserId `protobuf:"bytes,5,opt,name=creator,proto3,oneof"`
}

func (*ListPublicSharesRequest_Filter_ResourceId) isListPublicSharesRequest_Filter_Term() {}

func (*ListPublicSharesRequest_Filter_Owner) isListPublicSharesRequest_Filter_Term() {}

func (*ListPublicSharesRequest_Filter_Creator) isListPublicSharesRequest_Filter_Term() {}

var File_cs3_sharing_link_v1beta1_link_api_proto protoreflect.FileDescriptor

var file_cs3_sharing_link_v1beta1_link_api_proto_rawDesc = []byte{
	0x0a, 0x27, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x73, 0x33, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x1a, 0x29, 0x63, 0x73, 0x33, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x63, 0x73, 0x33, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x73,
	0x33, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x73, 0x33, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x81, 0x03, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x12, 0x45, 0x0a, 0x1f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0xef, 0x05, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x51, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x8a, 0x04, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x45, 0x0a,
	0x1f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x10,
	0x06, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x45, 0x58, 0x54, 0x52, 0x41, 0x52, 0x45, 0x43, 0x49,
	0x50, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x07, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0xef, 0x04, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xfc, 0x02, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x50, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x03, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0xe3, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x8f, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12,
	0x40, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x22, 0x7f, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12,
	0x40, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5b, 0x0a, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xe9, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x27, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x32, 0xfe, 0x05, 0x0a, 0x07, 0x4c, 0x69, 0x6e,
	0x6b, 0x41, 0x50, 0x49, 0x12, 0x7c, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x32, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x32, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x73, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x36, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x79, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x32, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xf2, 0x01, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0c, 0x4c, 0x69, 0x6e, 0x6b,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x33, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x6f,
	0x2d, 0x63, 0x73, 0x33, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x3b, 0x6c, 0x69, 0x6e, 0x6b, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03,
	0x43, 0x53, 0x4c, 0xaa, 0x02, 0x18, 0x43, 0x73, 0x33, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02,
	0x18, 0x43, 0x73, 0x33, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5c, 0x4c, 0x69, 0x6e,
	0x6b, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x24, 0x43, 0x73, 0x33, 0x5c,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5c, 0x4c, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1b, 0x43, 0x73, 0x33, 0x3a, 0x3a, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x3a,
	0x3a, 0x4c, 0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs3_sharing_link_v1beta1_link_api_proto_rawDescOnce sync.Once
	file_cs3_sharing_link_v1beta1_link_api_proto_rawDescData = file_cs3_sharing_link_v1beta1_link_api_proto_rawDesc
)

func file_cs3_sharing_link_v1beta1_link_api_proto_rawDescGZIP() []byte {
	file_cs3_sharing_link_v1beta1_link_api_proto_rawDescOnce.Do(func() {
		file_cs3_sharing_link_v1beta1_link_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs3_sharing_link_v1beta1_link_api_proto_rawDescData)
	})
	return file_cs3_sharing_link_v1beta1_link_api_proto_rawDescData
}

var file_cs3_sharing_link_v1beta1_link_api_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_cs3_sharing_link_v1beta1_link_api_proto_goTypes = []interface{}{
	(UpdatePublicShareRequest_Update_Type)(0), // 0: cs3.sharing.link.v1beta1.UpdatePublicShareRequest.Update.Type
	(ListPublicSharesRequest_Filter_Type)(0),  // 1: cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.Type
	(*CreatePublicShareRequest)(nil),          // 2: cs3.sharing.link.v1beta1.CreatePublicShareRequest
	(*CreatePublicShareResponse)(nil),         // 3: cs3.sharing.link.v1beta1.CreatePublicShareResponse
	(*UpdatePublicShareRequest)(nil),          // 4: cs3.sharing.link.v1beta1.UpdatePublicShareRequest
	(*UpdatePublicShareResponse)(nil),         // 5: cs3.sharing.link.v1beta1.UpdatePublicShareResponse
	(*ListPublicSharesRequest)(nil),           // 6: cs3.sharing.link.v1beta1.ListPublicSharesRequest
	(*ListPublicSharesResponse)(nil),          // 7: cs3.sharing.link.v1beta1.ListPublicSharesResponse
	(*RemovePublicShareRequest)(nil),          // 8: cs3.sharing.link.v1beta1.RemovePublicShareRequest
	(*RemovePublicShareResponse)(nil),         // 9: cs3.sharing.link.v1beta1.RemovePublicShareResponse
	(*GetPublicShareRequest)(nil),             // 10: cs3.sharing.link.v1beta1.GetPublicShareRequest
	(*GetPublicShareResponse)(nil),            // 11: cs3.sharing.link.v1beta1.GetPublicShareResponse
	(*GetPublicShareByTokenRequest)(nil),      // 12: cs3.sharing.link.v1beta1.GetPublicShareByTokenRequest
	(*GetPublicShareByTokenResponse)(nil),     // 13: cs3.sharing.link.v1beta1.GetPublicShareByTokenResponse
	(*UpdatePublicShareRequest_Update)(nil),   // 14: cs3.sharing.link.v1beta1.UpdatePublicShareRequest.Update
	(*ListPublicSharesRequest_Filter)(nil),    // 15: cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter
	(*v1beta1.Opaque)(nil),                    // 16: cs3.types.v1beta1.Opaque
	(*v1beta11.ResourceInfo)(nil),             // 17: cs3.storage.provider.v1beta1.ResourceInfo
	(*Grant)(nil),                             // 18: cs3.sharing.link.v1beta1.Grant
	(*v1beta12.Status)(nil),                   // 19: cs3.rpc.v1beta1.Status
	(*PublicShare)(nil),                       // 20: cs3.sharing.link.v1beta1.PublicShare
	(*PublicShareReference)(nil),              // 21: cs3.sharing.link.v1beta1.PublicShareReference
	(*PublicShareAuthentication)(nil),         // 22: cs3.sharing.link.v1beta1.PublicShareAuthentication
	(*v1beta11.ResourceId)(nil),               // 23: cs3.storage.provider.v1beta1.ResourceId
	(*v1beta13.UserId)(nil),                   // 24: cs3.identity.user.v1beta1.UserId
}
var file_cs3_sharing_link_v1beta1_link_api_proto_depIdxs = []int32{
	16, // 0: cs3.sharing.link.v1beta1.CreatePublicShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	17, // 1: cs3.sharing.link.v1beta1.CreatePublicShareRequest.resource_info:type_name -> cs3.storage.provider.v1beta1.ResourceInfo
	18, // 2: cs3.sharing.link.v1beta1.CreatePublicShareRequest.grant:type_name -> cs3.sharing.link.v1beta1.Grant
	19, // 3: cs3.sharing.link.v1beta1.CreatePublicShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	16, // 4: cs3.sharing.link.v1beta1.CreatePublicShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 5: cs3.sharing.link.v1beta1.CreatePublicShareResponse.share:type_name -> cs3.sharing.link.v1beta1.PublicShare
	16, // 6: cs3.sharing.link.v1beta1.UpdatePublicShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	21, // 7: cs3.sharing.link.v1beta1.UpdatePublicShareRequest.ref:type_name -> cs3.sharing.link.v1beta1.PublicShareReference
	14, // 8: cs3.sharing.link.v1beta1.UpdatePublicShareRequest.update:type_name -> cs3.sharing.link.v1beta1.UpdatePublicShareRequest.Update
	19, // 9: cs3.sharing.link.v1beta1.UpdatePublicShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	16, // 10: cs3.sharing.link.v1beta1.UpdatePublicShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 11: cs3.sharing.link.v1beta1.UpdatePublicShareResponse.share:type_name -> cs3.sharing.link.v1beta1.PublicShare
	16, // 12: cs3.sharing.link.v1beta1.ListPublicSharesRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	15, // 13: cs3.sharing.link.v1beta1.ListPublicSharesRequest.filters:type_name -> cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter
	19, // 14: cs3.sharing.link.v1beta1.ListPublicSharesResponse.status:type_name -> cs3.rpc.v1beta1.Status
	16, // 15: cs3.sharing.link.v1beta1.ListPublicSharesResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 16: cs3.sharing.link.v1beta1.ListPublicSharesResponse.share:type_name -> cs3.sharing.link.v1beta1.PublicShare
	16, // 17: cs3.sharing.link.v1beta1.RemovePublicShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	21, // 18: cs3.sharing.link.v1beta1.RemovePublicShareRequest.ref:type_name -> cs3.sharing.link.v1beta1.PublicShareReference
	19, // 19: cs3.sharing.link.v1beta1.RemovePublicShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	16, // 20: cs3.sharing.link.v1beta1.RemovePublicShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	16, // 21: cs3.sharing.link.v1beta1.GetPublicShareRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	21, // 22: cs3.sharing.link.v1beta1.GetPublicShareRequest.ref:type_name -> cs3.sharing.link.v1beta1.PublicShareReference
	19, // 23: cs3.sharing.link.v1beta1.GetPublicShareResponse.status:type_name -> cs3.rpc.v1beta1.Status
	16, // 24: cs3.sharing.link.v1beta1.GetPublicShareResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 25: cs3.sharing.link.v1beta1.GetPublicShareResponse.share:type_name -> cs3.sharing.link.v1beta1.PublicShare
	16, // 26: cs3.sharing.link.v1beta1.GetPublicShareByTokenRequest.opaque:type_name -> cs3.types.v1beta1.Opaque
	22, // 27: cs3.sharing.link.v1beta1.GetPublicShareByTokenRequest.authentication:type_name -> cs3.sharing.link.v1beta1.PublicShareAuthentication
	19, // 28: cs3.sharing.link.v1beta1.GetPublicShareByTokenResponse.status:type_name -> cs3.rpc.v1beta1.Status
	16, // 29: cs3.sharing.link.v1beta1.GetPublicShareByTokenResponse.opaque:type_name -> cs3.types.v1beta1.Opaque
	20, // 30: cs3.sharing.link.v1beta1.GetPublicShareByTokenResponse.share:type_name -> cs3.sharing.link.v1beta1.PublicShare
	0,  // 31: cs3.sharing.link.v1beta1.UpdatePublicShareRequest.Update.type:type_name -> cs3.sharing.link.v1beta1.UpdatePublicShareRequest.Update.Type
	18, // 32: cs3.sharing.link.v1beta1.UpdatePublicShareRequest.Update.grant:type_name -> cs3.sharing.link.v1beta1.Grant
	1,  // 33: cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.type:type_name -> cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.Type
	23, // 34: cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.resource_id:type_name -> cs3.storage.provider.v1beta1.ResourceId
	24, // 35: cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.owner:type_name -> cs3.identity.user.v1beta1.UserId
	24, // 36: cs3.sharing.link.v1beta1.ListPublicSharesRequest.Filter.creator:type_name -> cs3.identity.user.v1beta1.UserId
	2,  // 37: cs3.sharing.link.v1beta1.LinkAPI.CreatePublicShare:input_type -> cs3.sharing.link.v1beta1.CreatePublicShareRequest
	8,  // 38: cs3.sharing.link.v1beta1.LinkAPI.RemovePublicShare:input_type -> cs3.sharing.link.v1beta1.RemovePublicShareRequest
	10, // 39: cs3.sharing.link.v1beta1.LinkAPI.GetPublicShare:input_type -> cs3.sharing.link.v1beta1.GetPublicShareRequest
	12, // 40: cs3.sharing.link.v1beta1.LinkAPI.GetPublicShareByToken:input_type -> cs3.sharing.link.v1beta1.GetPublicShareByTokenRequest
	6,  // 41: cs3.sharing.link.v1beta1.LinkAPI.ListPublicShares:input_type -> cs3.sharing.link.v1beta1.ListPublicSharesRequest
	4,  // 42: cs3.sharing.link.v1beta1.LinkAPI.UpdatePublicShare:input_type -> cs3.sharing.link.v1beta1.UpdatePublicShareRequest
	3,  // 43: cs3.sharing.link.v1beta1.LinkAPI.CreatePublicShare:output_type -> cs3.sharing.link.v1beta1.CreatePublicShareResponse
	9,  // 44: cs3.sharing.link.v1beta1.LinkAPI.RemovePublicShare:output_type -> cs3.sharing.link.v1beta1.RemovePublicShareResponse
	11, // 45: cs3.sharing.link.v1beta1.LinkAPI.GetPublicShare:output_type -> cs3.sharing.link.v1beta1.GetPublicShareResponse
	13, // 46: cs3.sharing.link.v1beta1.LinkAPI.GetPublicShareByToken:output_type -> cs3.sharing.link.v1beta1.GetPublicShareByTokenResponse
	7,  // 47: cs3.sharing.link.v1beta1.LinkAPI.ListPublicShares:output_type -> cs3.sharing.link.v1beta1.ListPublicSharesResponse
	5,  // 48: cs3.sharing.link.v1beta1.LinkAPI.UpdatePublicShare:output_type -> cs3.sharing.link.v1beta1.UpdatePublicShareResponse
	43, // [43:49] is the sub-list for method output_type
	37, // [37:43] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_cs3_sharing_link_v1beta1_link_api_proto_init() }
func file_cs3_sharing_link_v1beta1_link_api_proto_init() {
	if File_cs3_sharing_link_v1beta1_link_api_proto != nil {
		return
	}
	file_cs3_sharing_link_v1beta1_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublicShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublicShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublicShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublicShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicSharesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicSharesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePublicShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePublicShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicShareByTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicShareByTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePublicShareRequest_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicSharesRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ListPublicSharesRequest_Filter_ResourceId)(nil),
		(*ListPublicSharesRequest_Filter_Owner)(nil),
		(*ListPublicSharesRequest_Filter_Creator)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs3_sharing_link_v1beta1_link_api_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cs3_sharing_link_v1beta1_link_api_proto_goTypes,
		DependencyIndexes: file_cs3_sharing_link_v1beta1_link_api_proto_depIdxs,
		EnumInfos:         file_cs3_sharing_link_v1beta1_link_api_proto_enumTypes,
		MessageInfos:      file_cs3_sharing_link_v1beta1_link_api_proto_msgTypes,
	}.Build()
	File_cs3_sharing_link_v1beta1_link_api_proto = out.File
	file_cs3_sharing_link_v1beta1_link_api_proto_rawDesc = nil
	file_cs3_sharing_link_v1beta1_link_api_proto_goTypes = nil
	file_cs3_sharing_link_v1beta1_link_api_proto_depIdxs = nil
}

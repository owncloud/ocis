// Copyright 2018-2023 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cs3/sharing/link/v1beta1/resources.proto

package linkv1beta1

import (
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/types/v1beta1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Public share are relationships between a resource owner
// (usually the authenticated user) who grants permissions to a recipient (grantee)
// on a specified resource (resource_id). UserShares represents both user and groups.
// TODO(labkode): do we need to have  resource_type stored on the share?
// This is not needed if when getting the shares a stat operation is launched against the
// the storage provider.
type PublicShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// Opaque unique identifier of the share.
	Id *PublicShareId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED.
	// The unlisted token to give public access
	// to the public share.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// REQUIRED.
	// Unique identifier of the shared resource.
	ResourceId *v1beta1.ResourceId `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// REQUIRED.
	// Permissions for the grantee to use
	// the resource.
	Permissions *PublicSharePermissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// REQUIRED.
	// Uniquely identifies the owner of the share
	// (the resource owner at the time of creating the share).
	// In case the ownership of the underlying resource changes
	// the share owner field MAY change to reflect the change of ownsership.
	Owner *v1beta11.UserId `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	// REQUIRED.
	// Uniquely identifies a principal who initiates the share creation.
	// A creator can create shares on behalf of the owner (because of re-sharing,
	// because belonging to special groups, ...).
	// Creator and owner often result in being the same principal.
	Creator *v1beta11.UserId `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	// REQUIRED.
	// Creation time of the share.
	Ctime *v1beta12.Timestamp `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime,omitempty"`
	// REQUIRED.
	// Last modification time of the share.
	Mtime *v1beta12.Timestamp `protobuf:"bytes,8,opt,name=mtime,proto3" json:"mtime,omitempty"`
	// REQUIRED.
	// Determines if the public share is password protected or not.
	PasswordProtected bool `protobuf:"varint,9,opt,name=password_protected,json=passwordProtected,proto3" json:"password_protected,omitempty"`
	// OPTIONAL.
	// The expiration time for the public share.
	Expiration *v1beta12.Timestamp `protobuf:"bytes,10,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// OPTIONAL.
	// Display name for the shared resource (such as file, directory basename or any
	// user defined name).
	// The display name MAY be different than the actual resource basename.
	// This field is only useful for informational purposes, like for example,
	// setting the window title in a public share HTML page.
	DisplayName string `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// OPTIONAL.
	// A time constrained token with which
	// GetPublicSharebyToken requests can be
	// authenticated.
	Signature *ShareSignature `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
	// OPTIONAL
	// A bool value indicating if the link is the quicklink
	// the server will enforce a maximum of 1 quicklink per resource
	Quicklink bool `protobuf:"varint,13,opt,name=quicklink,proto3" json:"quicklink,omitempty"`
	// OPTIONAL
	// Description of the share.
	Description string `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// OPTIONAL
	// Whether to notify the owner of a share when a file is uploaded to it.
	NotifyUploads bool `protobuf:"varint,15,opt,name=notify_uploads,json=notifyUploads,proto3" json:"notify_uploads,omitempty"`
	// OPTIONAL
	// Comma-separated list of extra email addresses to notify when a file is
	// uploaded to the share.
	NotifyUploadsExtraRecipients string `protobuf:"bytes,16,opt,name=notify_uploads_extra_recipients,json=notifyUploadsExtraRecipients,proto3" json:"notify_uploads_extra_recipients,omitempty"`
}

func (x *PublicShare) Reset() {
	*x = PublicShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicShare) ProtoMessage() {}

func (x *PublicShare) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicShare.ProtoReflect.Descriptor instead.
func (*PublicShare) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_resources_proto_rawDescGZIP(), []int{0}
}

func (x *PublicShare) GetId() *PublicShareId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PublicShare) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PublicShare) GetResourceId() *v1beta1.ResourceId {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *PublicShare) GetPermissions() *PublicSharePermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *PublicShare) GetOwner() *v1beta11.UserId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *PublicShare) GetCreator() *v1beta11.UserId {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *PublicShare) GetCtime() *v1beta12.Timestamp {
	if x != nil {
		return x.Ctime
	}
	return nil
}

func (x *PublicShare) GetMtime() *v1beta12.Timestamp {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *PublicShare) GetPasswordProtected() bool {
	if x != nil {
		return x.PasswordProtected
	}
	return false
}

func (x *PublicShare) GetExpiration() *v1beta12.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *PublicShare) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PublicShare) GetSignature() *ShareSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PublicShare) GetQuicklink() bool {
	if x != nil {
		return x.Quicklink
	}
	return false
}

func (x *PublicShare) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PublicShare) GetNotifyUploads() bool {
	if x != nil {
		return x.NotifyUploads
	}
	return false
}

func (x *PublicShare) GetNotifyUploadsExtraRecipients() string {
	if x != nil {
		return x.NotifyUploadsExtraRecipients
	}
	return ""
}

// The permissions for a share.
type PublicSharePermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions *v1beta1.ResourcePermissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"` // TODO(labkode): additional permissions for shares like re-sharing
}

func (x *PublicSharePermissions) Reset() {
	*x = PublicSharePermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicSharePermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicSharePermissions) ProtoMessage() {}

func (x *PublicSharePermissions) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicSharePermissions.ProtoReflect.Descriptor instead.
func (*PublicSharePermissions) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_resources_proto_rawDescGZIP(), []int{1}
}

func (x *PublicSharePermissions) GetPermissions() *v1beta1.ResourcePermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// A share id identifies uniquely a // share in the share provider namespace.
// A ShareId MUST be unique inside the share provider.
type PublicShareId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The internal id used by service implementor to
	// uniquely identity the share in the internal
	// implementation of the service.
	OpaqueId string `protobuf:"bytes,2,opt,name=opaque_id,json=opaqueId,proto3" json:"opaque_id,omitempty"`
}

func (x *PublicShareId) Reset() {
	*x = PublicShareId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicShareId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicShareId) ProtoMessage() {}

func (x *PublicShareId) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicShareId.ProtoReflect.Descriptor instead.
func (*PublicShareId) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_resources_proto_rawDescGZIP(), []int{2}
}

func (x *PublicShareId) GetOpaqueId() string {
	if x != nil {
		return x.OpaqueId
	}
	return ""
}

// The mechanism to identify a share
// in the share provider namespace.
type PublicShareReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// One of the specifications MUST be specified.
	//
	// Types that are assignable to Spec:
	//
	//	*PublicShareReference_Id
	//	*PublicShareReference_Token
	Spec isPublicShareReference_Spec `protobuf_oneof:"spec"`
}

func (x *PublicShareReference) Reset() {
	*x = PublicShareReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicShareReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicShareReference) ProtoMessage() {}

func (x *PublicShareReference) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicShareReference.ProtoReflect.Descriptor instead.
func (*PublicShareReference) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_resources_proto_rawDescGZIP(), []int{3}
}

func (m *PublicShareReference) GetSpec() isPublicShareReference_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *PublicShareReference) GetId() *PublicShareId {
	if x, ok := x.GetSpec().(*PublicShareReference_Id); ok {
		return x.Id
	}
	return nil
}

func (x *PublicShareReference) GetToken() string {
	if x, ok := x.GetSpec().(*PublicShareReference_Token); ok {
		return x.Token
	}
	return ""
}

type isPublicShareReference_Spec interface {
	isPublicShareReference_Spec()
}

type PublicShareReference_Id struct {
	// The id of the share.
	Id *PublicShareId `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type PublicShareReference_Token struct {
	// The token to identify the public share.
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

func (*PublicShareReference_Id) isPublicShareReference_Spec() {}

func (*PublicShareReference_Token) isPublicShareReference_Spec() {}

// The mechanism to authenticate a request to
// GetPublicShareByToken.
type PublicShareAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Spec:
	//
	//	*PublicShareAuthentication_Password
	//	*PublicShareAuthentication_Signature
	Spec isPublicShareAuthentication_Spec `protobuf_oneof:"spec"`
}

func (x *PublicShareAuthentication) Reset() {
	*x = PublicShareAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicShareAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicShareAuthentication) ProtoMessage() {}

func (x *PublicShareAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicShareAuthentication.ProtoReflect.Descriptor instead.
func (*PublicShareAuthentication) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_resources_proto_rawDescGZIP(), []int{4}
}

func (m *PublicShareAuthentication) GetSpec() isPublicShareAuthentication_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *PublicShareAuthentication) GetPassword() string {
	if x, ok := x.GetSpec().(*PublicShareAuthentication_Password); ok {
		return x.Password
	}
	return ""
}

func (x *PublicShareAuthentication) GetSignature() *ShareSignature {
	if x, ok := x.GetSpec().(*PublicShareAuthentication_Signature); ok {
		return x.Signature
	}
	return nil
}

type isPublicShareAuthentication_Spec interface {
	isPublicShareAuthentication_Spec()
}

type PublicShareAuthentication_Password struct {
	// The password of the share.
	Password string `protobuf:"bytes,1,opt,name=password,proto3,oneof"`
}

type PublicShareAuthentication_Signature struct {
	// The signature issued by GetPublicShareByToken.
	Signature *ShareSignature `protobuf:"bytes,2,opt,name=signature,proto3,oneof"`
}

func (*PublicShareAuthentication_Password) isPublicShareAuthentication_Spec() {}

func (*PublicShareAuthentication_Signature) isPublicShareAuthentication_Spec() {}

// A time constrained token which can be used to
// authenticate link share requests.
type ShareSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The signature value.
	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// REQUIRED.
	// The time until the signature becomes invalid.
	SignatureExpiration *v1beta12.Timestamp `protobuf:"bytes,2,opt,name=signature_expiration,json=signatureExpiration,proto3" json:"signature_expiration,omitempty"`
}

func (x *ShareSignature) Reset() {
	*x = ShareSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareSignature) ProtoMessage() {}

func (x *ShareSignature) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareSignature.ProtoReflect.Descriptor instead.
func (*ShareSignature) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_resources_proto_rawDescGZIP(), []int{5}
}

func (x *ShareSignature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ShareSignature) GetSignatureExpiration() *v1beta12.Timestamp {
	if x != nil {
		return x.SignatureExpiration
	}
	return nil
}

// Defines the restrictions for the public share.
type Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED.
	// The permissions for the share.
	Permissions *PublicSharePermissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// OPTIONAL.
	// A password to protect the access to the public share.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// OPTIONAL.
	// An expiration date to protect the access to the public share.
	Expiration *v1beta12.Timestamp `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *Grant) Reset() {
	*x = Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grant) ProtoMessage() {}

func (x *Grant) ProtoReflect() protoreflect.Message {
	mi := &file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grant.ProtoReflect.Descriptor instead.
func (*Grant) Descriptor() ([]byte, []int) {
	return file_cs3_sharing_link_v1beta1_resources_proto_rawDescGZIP(), []int{6}
}

func (x *Grant) GetPermissions() *PublicSharePermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Grant) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Grant) GetExpiration() *v1beta12.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

var File_cs3_sharing_link_v1beta1_resources_proto protoreflect.FileDescriptor

var file_cs3_sharing_link_v1beta1_resources_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69,
	0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x73, 0x33, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x1a, 0x29, 0x63, 0x73, 0x33, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63,
	0x73, 0x33, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x06, 0x0a,
	0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x32, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d,
	0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2c, 0x0a,
	0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x14, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8b,
	0x01, 0x0a, 0x19, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x7f, 0x0a, 0x0e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x14,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x73, 0x33,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x01,
	0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x73, 0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xf4, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x73,
	0x33, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x33, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x6f, 0x2d, 0x63,
	0x73, 0x33, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x73, 0x33, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b,
	0x6c, 0x69, 0x6e, 0x6b, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53,
	0x4c, 0xaa, 0x02, 0x18, 0x43, 0x73, 0x33, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x18, 0x43,
	0x73, 0x33, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5c, 0x4c, 0x69, 0x6e, 0x6b, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x24, 0x43, 0x73, 0x33, 0x5c, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x5c, 0x4c, 0x69, 0x6e, 0x6b, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x1b, 0x43, 0x73, 0x33, 0x3a, 0x3a, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x4c,
	0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs3_sharing_link_v1beta1_resources_proto_rawDescOnce sync.Once
	file_cs3_sharing_link_v1beta1_resources_proto_rawDescData = file_cs3_sharing_link_v1beta1_resources_proto_rawDesc
)

func file_cs3_sharing_link_v1beta1_resources_proto_rawDescGZIP() []byte {
	file_cs3_sharing_link_v1beta1_resources_proto_rawDescOnce.Do(func() {
		file_cs3_sharing_link_v1beta1_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs3_sharing_link_v1beta1_resources_proto_rawDescData)
	})
	return file_cs3_sharing_link_v1beta1_resources_proto_rawDescData
}

var file_cs3_sharing_link_v1beta1_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cs3_sharing_link_v1beta1_resources_proto_goTypes = []interface{}{
	(*PublicShare)(nil),                 // 0: cs3.sharing.link.v1beta1.PublicShare
	(*PublicSharePermissions)(nil),      // 1: cs3.sharing.link.v1beta1.PublicSharePermissions
	(*PublicShareId)(nil),               // 2: cs3.sharing.link.v1beta1.PublicShareId
	(*PublicShareReference)(nil),        // 3: cs3.sharing.link.v1beta1.PublicShareReference
	(*PublicShareAuthentication)(nil),   // 4: cs3.sharing.link.v1beta1.PublicShareAuthentication
	(*ShareSignature)(nil),              // 5: cs3.sharing.link.v1beta1.ShareSignature
	(*Grant)(nil),                       // 6: cs3.sharing.link.v1beta1.Grant
	(*v1beta1.ResourceId)(nil),          // 7: cs3.storage.provider.v1beta1.ResourceId
	(*v1beta11.UserId)(nil),             // 8: cs3.identity.user.v1beta1.UserId
	(*v1beta12.Timestamp)(nil),          // 9: cs3.types.v1beta1.Timestamp
	(*v1beta1.ResourcePermissions)(nil), // 10: cs3.storage.provider.v1beta1.ResourcePermissions
}
var file_cs3_sharing_link_v1beta1_resources_proto_depIdxs = []int32{
	2,  // 0: cs3.sharing.link.v1beta1.PublicShare.id:type_name -> cs3.sharing.link.v1beta1.PublicShareId
	7,  // 1: cs3.sharing.link.v1beta1.PublicShare.resource_id:type_name -> cs3.storage.provider.v1beta1.ResourceId
	1,  // 2: cs3.sharing.link.v1beta1.PublicShare.permissions:type_name -> cs3.sharing.link.v1beta1.PublicSharePermissions
	8,  // 3: cs3.sharing.link.v1beta1.PublicShare.owner:type_name -> cs3.identity.user.v1beta1.UserId
	8,  // 4: cs3.sharing.link.v1beta1.PublicShare.creator:type_name -> cs3.identity.user.v1beta1.UserId
	9,  // 5: cs3.sharing.link.v1beta1.PublicShare.ctime:type_name -> cs3.types.v1beta1.Timestamp
	9,  // 6: cs3.sharing.link.v1beta1.PublicShare.mtime:type_name -> cs3.types.v1beta1.Timestamp
	9,  // 7: cs3.sharing.link.v1beta1.PublicShare.expiration:type_name -> cs3.types.v1beta1.Timestamp
	5,  // 8: cs3.sharing.link.v1beta1.PublicShare.signature:type_name -> cs3.sharing.link.v1beta1.ShareSignature
	10, // 9: cs3.sharing.link.v1beta1.PublicSharePermissions.permissions:type_name -> cs3.storage.provider.v1beta1.ResourcePermissions
	2,  // 10: cs3.sharing.link.v1beta1.PublicShareReference.id:type_name -> cs3.sharing.link.v1beta1.PublicShareId
	5,  // 11: cs3.sharing.link.v1beta1.PublicShareAuthentication.signature:type_name -> cs3.sharing.link.v1beta1.ShareSignature
	9,  // 12: cs3.sharing.link.v1beta1.ShareSignature.signature_expiration:type_name -> cs3.types.v1beta1.Timestamp
	1,  // 13: cs3.sharing.link.v1beta1.Grant.permissions:type_name -> cs3.sharing.link.v1beta1.PublicSharePermissions
	9,  // 14: cs3.sharing.link.v1beta1.Grant.expiration:type_name -> cs3.types.v1beta1.Timestamp
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_cs3_sharing_link_v1beta1_resources_proto_init() }
func file_cs3_sharing_link_v1beta1_resources_proto_init() {
	if File_cs3_sharing_link_v1beta1_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicSharePermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicShareId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicShareReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicShareAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*PublicShareReference_Id)(nil),
		(*PublicShareReference_Token)(nil),
	}
	file_cs3_sharing_link_v1beta1_resources_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PublicShareAuthentication_Password)(nil),
		(*PublicShareAuthentication_Signature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs3_sharing_link_v1beta1_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cs3_sharing_link_v1beta1_resources_proto_goTypes,
		DependencyIndexes: file_cs3_sharing_link_v1beta1_resources_proto_depIdxs,
		MessageInfos:      file_cs3_sharing_link_v1beta1_resources_proto_msgTypes,
	}.Build()
	File_cs3_sharing_link_v1beta1_resources_proto = out.File
	file_cs3_sharing_link_v1beta1_resources_proto_rawDesc = nil
	file_cs3_sharing_link_v1beta1_resources_proto_goTypes = nil
	file_cs3_sharing_link_v1beta1_resources_proto_depIdxs = nil
}

// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cs3/gateway/v1beta1/gateway_api.proto

package gatewayv1beta1

import (
	context "context"
	v1beta12 "github.com/cs3org/go-cs3apis/cs3/app/provider/v1beta1"
	v1beta17 "github.com/cs3org/go-cs3apis/cs3/app/registry/v1beta1"
	v1beta1 "github.com/cs3org/go-cs3apis/cs3/auth/applications/v1beta1"
	v1beta110 "github.com/cs3org/go-cs3apis/cs3/auth/registry/v1beta1"
	v1beta19 "github.com/cs3org/go-cs3apis/cs3/identity/group/v1beta1"
	v1beta18 "github.com/cs3org/go-cs3apis/cs3/identity/user/v1beta1"
	v1beta113 "github.com/cs3org/go-cs3apis/cs3/ocm/core/v1beta1"
	v1beta111 "github.com/cs3org/go-cs3apis/cs3/ocm/invite/v1beta1"
	v1beta112 "github.com/cs3org/go-cs3apis/cs3/ocm/provider/v1beta1"
	v1beta115 "github.com/cs3org/go-cs3apis/cs3/permissions/v1beta1"
	v1beta14 "github.com/cs3org/go-cs3apis/cs3/preferences/v1beta1"
	v1beta13 "github.com/cs3org/go-cs3apis/cs3/sharing/collaboration/v1beta1"
	v1beta15 "github.com/cs3org/go-cs3apis/cs3/sharing/link/v1beta1"
	v1beta16 "github.com/cs3org/go-cs3apis/cs3/sharing/ocm/v1beta1"
	v1beta11 "github.com/cs3org/go-cs3apis/cs3/storage/provider/v1beta1"
	v1beta114 "github.com/cs3org/go-cs3apis/cs3/tx/v1beta1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GatewayAPI_Authenticate_FullMethodName                     = "/cs3.gateway.v1beta1.GatewayAPI/Authenticate"
	GatewayAPI_WhoAmI_FullMethodName                           = "/cs3.gateway.v1beta1.GatewayAPI/WhoAmI"
	GatewayAPI_GenerateAppPassword_FullMethodName              = "/cs3.gateway.v1beta1.GatewayAPI/GenerateAppPassword"
	GatewayAPI_ListAppPasswords_FullMethodName                 = "/cs3.gateway.v1beta1.GatewayAPI/ListAppPasswords"
	GatewayAPI_InvalidateAppPassword_FullMethodName            = "/cs3.gateway.v1beta1.GatewayAPI/InvalidateAppPassword"
	GatewayAPI_GetAppPassword_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/GetAppPassword"
	GatewayAPI_CreateContainer_FullMethodName                  = "/cs3.gateway.v1beta1.GatewayAPI/CreateContainer"
	GatewayAPI_TouchFile_FullMethodName                        = "/cs3.gateway.v1beta1.GatewayAPI/TouchFile"
	GatewayAPI_Delete_FullMethodName                           = "/cs3.gateway.v1beta1.GatewayAPI/Delete"
	GatewayAPI_GetPath_FullMethodName                          = "/cs3.gateway.v1beta1.GatewayAPI/GetPath"
	GatewayAPI_GetQuota_FullMethodName                         = "/cs3.gateway.v1beta1.GatewayAPI/GetQuota"
	GatewayAPI_InitiateFileDownload_FullMethodName             = "/cs3.gateway.v1beta1.GatewayAPI/InitiateFileDownload"
	GatewayAPI_InitiateFileUpload_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/InitiateFileUpload"
	GatewayAPI_ListContainerStream_FullMethodName              = "/cs3.gateway.v1beta1.GatewayAPI/ListContainerStream"
	GatewayAPI_ListContainer_FullMethodName                    = "/cs3.gateway.v1beta1.GatewayAPI/ListContainer"
	GatewayAPI_ListFileVersions_FullMethodName                 = "/cs3.gateway.v1beta1.GatewayAPI/ListFileVersions"
	GatewayAPI_ListRecycleStream_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/ListRecycleStream"
	GatewayAPI_ListRecycle_FullMethodName                      = "/cs3.gateway.v1beta1.GatewayAPI/ListRecycle"
	GatewayAPI_Move_FullMethodName                             = "/cs3.gateway.v1beta1.GatewayAPI/Move"
	GatewayAPI_PurgeRecycle_FullMethodName                     = "/cs3.gateway.v1beta1.GatewayAPI/PurgeRecycle"
	GatewayAPI_RestoreFileVersion_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/RestoreFileVersion"
	GatewayAPI_RestoreRecycleItem_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/RestoreRecycleItem"
	GatewayAPI_Stat_FullMethodName                             = "/cs3.gateway.v1beta1.GatewayAPI/Stat"
	GatewayAPI_CreateSymlink_FullMethodName                    = "/cs3.gateway.v1beta1.GatewayAPI/CreateSymlink"
	GatewayAPI_SetArbitraryMetadata_FullMethodName             = "/cs3.gateway.v1beta1.GatewayAPI/SetArbitraryMetadata"
	GatewayAPI_UnsetArbitraryMetadata_FullMethodName           = "/cs3.gateway.v1beta1.GatewayAPI/UnsetArbitraryMetadata"
	GatewayAPI_SetLock_FullMethodName                          = "/cs3.gateway.v1beta1.GatewayAPI/SetLock"
	GatewayAPI_GetLock_FullMethodName                          = "/cs3.gateway.v1beta1.GatewayAPI/GetLock"
	GatewayAPI_RefreshLock_FullMethodName                      = "/cs3.gateway.v1beta1.GatewayAPI/RefreshLock"
	GatewayAPI_Unlock_FullMethodName                           = "/cs3.gateway.v1beta1.GatewayAPI/Unlock"
	GatewayAPI_CreateHome_FullMethodName                       = "/cs3.gateway.v1beta1.GatewayAPI/CreateHome"
	GatewayAPI_CreateStorageSpace_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/CreateStorageSpace"
	GatewayAPI_ListStorageSpaces_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/ListStorageSpaces"
	GatewayAPI_UpdateStorageSpace_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/UpdateStorageSpace"
	GatewayAPI_DeleteStorageSpace_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/DeleteStorageSpace"
	GatewayAPI_OpenInApp_FullMethodName                        = "/cs3.gateway.v1beta1.GatewayAPI/OpenInApp"
	GatewayAPI_CreateShare_FullMethodName                      = "/cs3.gateway.v1beta1.GatewayAPI/CreateShare"
	GatewayAPI_RemoveShare_FullMethodName                      = "/cs3.gateway.v1beta1.GatewayAPI/RemoveShare"
	GatewayAPI_GetShare_FullMethodName                         = "/cs3.gateway.v1beta1.GatewayAPI/GetShare"
	GatewayAPI_ListShares_FullMethodName                       = "/cs3.gateway.v1beta1.GatewayAPI/ListShares"
	GatewayAPI_ListExistingShares_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/ListExistingShares"
	GatewayAPI_UpdateShare_FullMethodName                      = "/cs3.gateway.v1beta1.GatewayAPI/UpdateShare"
	GatewayAPI_ListReceivedShares_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/ListReceivedShares"
	GatewayAPI_ListExistingReceivedShares_FullMethodName       = "/cs3.gateway.v1beta1.GatewayAPI/ListExistingReceivedShares"
	GatewayAPI_UpdateReceivedShare_FullMethodName              = "/cs3.gateway.v1beta1.GatewayAPI/UpdateReceivedShare"
	GatewayAPI_GetReceivedShare_FullMethodName                 = "/cs3.gateway.v1beta1.GatewayAPI/GetReceivedShare"
	GatewayAPI_SetKey_FullMethodName                           = "/cs3.gateway.v1beta1.GatewayAPI/SetKey"
	GatewayAPI_GetKey_FullMethodName                           = "/cs3.gateway.v1beta1.GatewayAPI/GetKey"
	GatewayAPI_CreatePublicShare_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/CreatePublicShare"
	GatewayAPI_RemovePublicShare_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/RemovePublicShare"
	GatewayAPI_GetPublicShare_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/GetPublicShare"
	GatewayAPI_GetPublicShareByToken_FullMethodName            = "/cs3.gateway.v1beta1.GatewayAPI/GetPublicShareByToken"
	GatewayAPI_ListPublicShares_FullMethodName                 = "/cs3.gateway.v1beta1.GatewayAPI/ListPublicShares"
	GatewayAPI_ListExistingPublicShares_FullMethodName         = "/cs3.gateway.v1beta1.GatewayAPI/ListExistingPublicShares"
	GatewayAPI_UpdatePublicShare_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/UpdatePublicShare"
	GatewayAPI_CreateOCMShare_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/CreateOCMShare"
	GatewayAPI_RemoveOCMShare_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/RemoveOCMShare"
	GatewayAPI_GetOCMShare_FullMethodName                      = "/cs3.gateway.v1beta1.GatewayAPI/GetOCMShare"
	GatewayAPI_GetOCMShareByToken_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/GetOCMShareByToken"
	GatewayAPI_ListOCMShares_FullMethodName                    = "/cs3.gateway.v1beta1.GatewayAPI/ListOCMShares"
	GatewayAPI_UpdateOCMShare_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/UpdateOCMShare"
	GatewayAPI_ListReceivedOCMShares_FullMethodName            = "/cs3.gateway.v1beta1.GatewayAPI/ListReceivedOCMShares"
	GatewayAPI_UpdateReceivedOCMShare_FullMethodName           = "/cs3.gateway.v1beta1.GatewayAPI/UpdateReceivedOCMShare"
	GatewayAPI_GetReceivedOCMShare_FullMethodName              = "/cs3.gateway.v1beta1.GatewayAPI/GetReceivedOCMShare"
	GatewayAPI_GetAppProviders_FullMethodName                  = "/cs3.gateway.v1beta1.GatewayAPI/GetAppProviders"
	GatewayAPI_AddAppProvider_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/AddAppProvider"
	GatewayAPI_ListAppProviders_FullMethodName                 = "/cs3.gateway.v1beta1.GatewayAPI/ListAppProviders"
	GatewayAPI_ListSupportedMimeTypes_FullMethodName           = "/cs3.gateway.v1beta1.GatewayAPI/ListSupportedMimeTypes"
	GatewayAPI_GetDefaultAppProviderForMimeType_FullMethodName = "/cs3.gateway.v1beta1.GatewayAPI/GetDefaultAppProviderForMimeType"
	GatewayAPI_SetDefaultAppProviderForMimeType_FullMethodName = "/cs3.gateway.v1beta1.GatewayAPI/SetDefaultAppProviderForMimeType"
	GatewayAPI_GetUser_FullMethodName                          = "/cs3.gateway.v1beta1.GatewayAPI/GetUser"
	GatewayAPI_GetUserByClaim_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/GetUserByClaim"
	GatewayAPI_GetUserGroups_FullMethodName                    = "/cs3.gateway.v1beta1.GatewayAPI/GetUserGroups"
	GatewayAPI_FindUsers_FullMethodName                        = "/cs3.gateway.v1beta1.GatewayAPI/FindUsers"
	GatewayAPI_GetGroup_FullMethodName                         = "/cs3.gateway.v1beta1.GatewayAPI/GetGroup"
	GatewayAPI_GetGroupByClaim_FullMethodName                  = "/cs3.gateway.v1beta1.GatewayAPI/GetGroupByClaim"
	GatewayAPI_GetMembers_FullMethodName                       = "/cs3.gateway.v1beta1.GatewayAPI/GetMembers"
	GatewayAPI_HasMember_FullMethodName                        = "/cs3.gateway.v1beta1.GatewayAPI/HasMember"
	GatewayAPI_FindGroups_FullMethodName                       = "/cs3.gateway.v1beta1.GatewayAPI/FindGroups"
	GatewayAPI_ListAuthProviders_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/ListAuthProviders"
	GatewayAPI_GetHome_FullMethodName                          = "/cs3.gateway.v1beta1.GatewayAPI/GetHome"
	GatewayAPI_GenerateInviteToken_FullMethodName              = "/cs3.gateway.v1beta1.GatewayAPI/GenerateInviteToken"
	GatewayAPI_ListInviteTokens_FullMethodName                 = "/cs3.gateway.v1beta1.GatewayAPI/ListInviteTokens"
	GatewayAPI_ForwardInvite_FullMethodName                    = "/cs3.gateway.v1beta1.GatewayAPI/ForwardInvite"
	GatewayAPI_AcceptInvite_FullMethodName                     = "/cs3.gateway.v1beta1.GatewayAPI/AcceptInvite"
	GatewayAPI_GetAcceptedUser_FullMethodName                  = "/cs3.gateway.v1beta1.GatewayAPI/GetAcceptedUser"
	GatewayAPI_FindAcceptedUsers_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/FindAcceptedUsers"
	GatewayAPI_DeleteAcceptedUser_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/DeleteAcceptedUser"
	GatewayAPI_IsProviderAllowed_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/IsProviderAllowed"
	GatewayAPI_GetInfoByDomain_FullMethodName                  = "/cs3.gateway.v1beta1.GatewayAPI/GetInfoByDomain"
	GatewayAPI_ListAllProviders_FullMethodName                 = "/cs3.gateway.v1beta1.GatewayAPI/ListAllProviders"
	GatewayAPI_CreateOCMCoreShare_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/CreateOCMCoreShare"
	GatewayAPI_UpdateOCMCoreShare_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/UpdateOCMCoreShare"
	GatewayAPI_DeleteOCMCoreShare_FullMethodName               = "/cs3.gateway.v1beta1.GatewayAPI/DeleteOCMCoreShare"
	GatewayAPI_CreateTransfer_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/CreateTransfer"
	GatewayAPI_GetTransferStatus_FullMethodName                = "/cs3.gateway.v1beta1.GatewayAPI/GetTransferStatus"
	GatewayAPI_CancelTransfer_FullMethodName                   = "/cs3.gateway.v1beta1.GatewayAPI/CancelTransfer"
	GatewayAPI_ListTransfers_FullMethodName                    = "/cs3.gateway.v1beta1.GatewayAPI/ListTransfers"
	GatewayAPI_RetryTransfer_FullMethodName                    = "/cs3.gateway.v1beta1.GatewayAPI/RetryTransfer"
	GatewayAPI_CheckPermission_FullMethodName                  = "/cs3.gateway.v1beta1.GatewayAPI/CheckPermission"
)

// GatewayAPIClient is the client API for GatewayAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayAPIClient interface {
	// Authenticates a user.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	// WhoAmI returns the information for a user.
	WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
	// GenerateAppPassword creates a password with specified scope to be used by
	// third-party applications.
	GenerateAppPassword(ctx context.Context, in *v1beta1.GenerateAppPasswordRequest, opts ...grpc.CallOption) (*v1beta1.GenerateAppPasswordResponse, error)
	// ListAppPasswords lists the application passwords created by a user.
	ListAppPasswords(ctx context.Context, in *v1beta1.ListAppPasswordsRequest, opts ...grpc.CallOption) (*v1beta1.ListAppPasswordsResponse, error)
	// InvalidateAppPassword invalidates a generated password.
	InvalidateAppPassword(ctx context.Context, in *v1beta1.InvalidateAppPasswordRequest, opts ...grpc.CallOption) (*v1beta1.InvalidateAppPasswordResponse, error)
	// GetAppPassword retrieves the password information by the combination of username and password.
	GetAppPassword(ctx context.Context, in *v1beta1.GetAppPasswordRequest, opts ...grpc.CallOption) (*v1beta1.GetAppPasswordResponse, error)
	// Creates a new resource of type container.
	// MUST return CODE_FAILED_PRECONDITION if the container
	// cannot be created at the specified reference.
	CreateContainer(ctx context.Context, in *v1beta11.CreateContainerRequest, opts ...grpc.CallOption) (*v1beta11.CreateContainerResponse, error)
	// Creates a new resource of type file.
	// MUST return CODE_FAILED_PRECONDITION if the file
	// cannot be created at the specified reference.
	TouchFile(ctx context.Context, in *v1beta11.TouchFileRequest, opts ...grpc.CallOption) (*v1beta11.TouchFileResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_TOO_EARLY if some are not finished job over resource is still in process.
	Delete(ctx context.Context, in *v1beta11.DeleteRequest, opts ...grpc.CallOption) (*v1beta11.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(ctx context.Context, in *v1beta11.GetPathRequest, opts ...grpc.CallOption) (*v1beta11.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*v1beta11.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(ctx context.Context, in *v1beta11.InitiateFileDownloadRequest, opts ...grpc.CallOption) (*InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(ctx context.Context, in *v1beta11.InitiateFileUploadRequest, opts ...grpc.CallOption) (*InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(ctx context.Context, in *v1beta11.ListContainerStreamRequest, opts ...grpc.CallOption) (GatewayAPI_ListContainerStreamClient, error)
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(ctx context.Context, in *v1beta11.ListContainerRequest, opts ...grpc.CallOption) (*v1beta11.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(ctx context.Context, in *v1beta11.ListFileVersionsRequest, opts ...grpc.CallOption) (*v1beta11.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(ctx context.Context, in *v1beta11.ListRecycleStreamRequest, opts ...grpc.CallOption) (GatewayAPI_ListRecycleStreamClient, error)
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(ctx context.Context, in *v1beta11.ListRecycleRequest, opts ...grpc.CallOption) (*v1beta11.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_FAILED_PRECONDITION if the source reference.
	// MUST return CODE_TOO_EARLY if some are not finished job over resource is still in process.
	// cannot be moved to the destination reference.
	Move(ctx context.Context, in *v1beta11.MoveRequest, opts ...grpc.CallOption) (*v1beta11.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(ctx context.Context, in *v1beta11.PurgeRecycleRequest, opts ...grpc.CallOption) (*v1beta11.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(ctx context.Context, in *v1beta11.RestoreFileVersionRequest, opts ...grpc.CallOption) (*v1beta11.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_FAILED_PRECONDITION if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(ctx context.Context, in *v1beta11.RestoreRecycleItemRequest, opts ...grpc.CallOption) (*v1beta11.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(ctx context.Context, in *v1beta11.StatRequest, opts ...grpc.CallOption) (*v1beta11.StatResponse, error)
	// Creates a symlink to another resource.
	CreateSymlink(ctx context.Context, in *v1beta11.CreateSymlinkRequest, opts ...grpc.CallOption) (*v1beta11.CreateSymlinkResponse, error)
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	SetArbitraryMetadata(ctx context.Context, in *v1beta11.SetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v1beta11.SetArbitraryMetadataResponse, error)
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	UnsetArbitraryMetadata(ctx context.Context, in *v1beta11.UnsetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v1beta11.UnsetArbitraryMetadataResponse, error)
	// Locks a storage resource.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_FAILED_PRECONDITION if the reference is already locked.
	// In addition, the implementation MUST ensure atomicity when multiple users
	// concurrently attempt to set a lock.
	// The caller MUST have write permissions on the resource.
	SetLock(ctx context.Context, in *v1beta11.SetLockRequest, opts ...grpc.CallOption) (*v1beta11.SetLockResponse, error)
	// Gets the lock metadata of a storage resource.
	// MUST return CODE_NOT_FOUND if the reference does not exist or is not locked.
	// The caller MUST have read permissions on the resource.
	GetLock(ctx context.Context, in *v1beta11.GetLockRequest, opts ...grpc.CallOption) (*v1beta11.GetLockResponse, error)
	// Refreshes the lock metadata of a storage resource.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_FAILED_PRECONDITION if the reference is not locked
	// or if the caller does not hold the lock.
	// The caller MUST have write permissions on the resource.
	RefreshLock(ctx context.Context, in *v1beta11.RefreshLockRequest, opts ...grpc.CallOption) (*v1beta11.RefreshLockResponse, error)
	// Unlocks a storage resource.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_FAILED_PRECONDITION if the reference is not locked
	// or if the caller does not hold the lock.
	// The caller MUST have write permissions on the resource.
	Unlock(ctx context.Context, in *v1beta11.UnlockRequest, opts ...grpc.CallOption) (*v1beta11.UnlockResponse, error)
	// Creates the home directory for a user.
	CreateHome(ctx context.Context, in *v1beta11.CreateHomeRequest, opts ...grpc.CallOption) (*v1beta11.CreateHomeResponse, error)
	// Creates a storage space.
	CreateStorageSpace(ctx context.Context, in *v1beta11.CreateStorageSpaceRequest, opts ...grpc.CallOption) (*v1beta11.CreateStorageSpaceResponse, error)
	// Lists storage spaces.
	ListStorageSpaces(ctx context.Context, in *v1beta11.ListStorageSpacesRequest, opts ...grpc.CallOption) (*v1beta11.ListStorageSpacesResponse, error)
	// Updates a storage space.
	UpdateStorageSpace(ctx context.Context, in *v1beta11.UpdateStorageSpaceRequest, opts ...grpc.CallOption) (*v1beta11.UpdateStorageSpaceResponse, error)
	// Deletes a storage space.
	DeleteStorageSpace(ctx context.Context, in *v1beta11.DeleteStorageSpaceRequest, opts ...grpc.CallOption) (*v1beta11.DeleteStorageSpaceResponse, error)
	// Returns the App URL and all necessary info to open a resource in an online editor.
	// MUST return CODE_NOT_FOUND if the resource does not exist.
	OpenInApp(ctx context.Context, in *OpenInAppRequest, opts ...grpc.CallOption) (*v1beta12.OpenInAppResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_LOCKED if the resource reference already locked.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(ctx context.Context, in *v1beta13.CreateShareRequest, opts ...grpc.CallOption) (*v1beta13.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(ctx context.Context, in *v1beta13.RemoveShareRequest, opts ...grpc.CallOption) (*v1beta13.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(ctx context.Context, in *v1beta13.GetShareRequest, opts ...grpc.CallOption) (*v1beta13.GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(ctx context.Context, in *v1beta13.ListSharesRequest, opts ...grpc.CallOption) (*v1beta13.ListSharesResponse, error)
	// List all existing shares the authenticated principal has created,
	// including their storage resource information.
	ListExistingShares(ctx context.Context, in *v1beta13.ListSharesRequest, opts ...grpc.CallOption) (*ListExistingSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(ctx context.Context, in *v1beta13.UpdateShareRequest, opts ...grpc.CallOption) (*v1beta13.UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(ctx context.Context, in *v1beta13.ListReceivedSharesRequest, opts ...grpc.CallOption) (*v1beta13.ListReceivedSharesResponse, error)
	// List all existing shares the authenticated principal has received,
	// including their storage resource information.
	ListExistingReceivedShares(ctx context.Context, in *v1beta13.ListReceivedSharesRequest, opts ...grpc.CallOption) (*ListExistingReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(ctx context.Context, in *v1beta13.UpdateReceivedShareRequest, opts ...grpc.CallOption) (*v1beta13.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(ctx context.Context, in *v1beta13.GetReceivedShareRequest, opts ...grpc.CallOption) (*v1beta13.GetReceivedShareResponse, error)
	// Maps the key-value pair.
	SetKey(ctx context.Context, in *v1beta14.SetKeyRequest, opts ...grpc.CallOption) (*v1beta14.SetKeyResponse, error)
	// Returns the value associated with the
	// requested key.
	GetKey(ctx context.Context, in *v1beta14.GetKeyRequest, opts ...grpc.CallOption) (*v1beta14.GetKeyResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(ctx context.Context, in *v1beta15.CreatePublicShareRequest, opts ...grpc.CallOption) (*v1beta15.CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(ctx context.Context, in *v1beta15.RemovePublicShareRequest, opts ...grpc.CallOption) (*v1beta15.RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(ctx context.Context, in *v1beta15.GetPublicShareRequest, opts ...grpc.CallOption) (*v1beta15.GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(ctx context.Context, in *v1beta15.GetPublicShareByTokenRequest, opts ...grpc.CallOption) (*v1beta15.GetPublicShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(ctx context.Context, in *v1beta15.ListPublicSharesRequest, opts ...grpc.CallOption) (*v1beta15.ListPublicSharesResponse, error)
	// List all existing shares the authenticated principal has created,
	// both as owner and creator, including their storage resource information.
	// If a filter is specified, only shares satisfying the filter MUST be returned.
	ListExistingPublicShares(ctx context.Context, in *v1beta15.ListPublicSharesRequest, opts ...grpc.CallOption) (*ListExistingPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(ctx context.Context, in *v1beta15.UpdatePublicShareRequest, opts ...grpc.CallOption) (*v1beta15.UpdatePublicShareResponse, error)
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(ctx context.Context, in *v1beta16.CreateOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(ctx context.Context, in *v1beta16.RemoveOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(ctx context.Context, in *v1beta16.GetOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.GetOCMShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetOCMShareByToken(ctx context.Context, in *v1beta16.GetOCMShareByTokenRequest, opts ...grpc.CallOption) (*v1beta16.GetOCMShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(ctx context.Context, in *v1beta16.ListOCMSharesRequest, opts ...grpc.CallOption) (*v1beta16.ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(ctx context.Context, in *v1beta16.UpdateOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.UpdateOCMShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedOCMShares(ctx context.Context, in *v1beta16.ListReceivedOCMSharesRequest, opts ...grpc.CallOption) (*v1beta16.ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(ctx context.Context, in *v1beta16.UpdateReceivedOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.UpdateReceivedOCMShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedOCMShare(ctx context.Context, in *v1beta16.GetReceivedOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.GetReceivedOCMShareResponse, error)
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(ctx context.Context, in *v1beta17.GetAppProvidersRequest, opts ...grpc.CallOption) (*v1beta17.GetAppProvidersResponse, error)
	// Registers a new app provider to the registry.
	AddAppProvider(ctx context.Context, in *v1beta17.AddAppProviderRequest, opts ...grpc.CallOption) (*v1beta17.AddAppProviderResponse, error)
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(ctx context.Context, in *v1beta17.ListAppProvidersRequest, opts ...grpc.CallOption) (*v1beta17.ListAppProvidersResponse, error)
	// Returns a list of the supported mime types along with the apps which they can opened with.
	ListSupportedMimeTypes(ctx context.Context, in *v1beta17.ListSupportedMimeTypesRequest, opts ...grpc.CallOption) (*v1beta17.ListSupportedMimeTypesResponse, error)
	// Returns the default app provider which serves a specified mime type.
	GetDefaultAppProviderForMimeType(ctx context.Context, in *v1beta17.GetDefaultAppProviderForMimeTypeRequest, opts ...grpc.CallOption) (*v1beta17.GetDefaultAppProviderForMimeTypeResponse, error)
	// Sets the default app provider for a specified mime type.
	SetDefaultAppProviderForMimeType(ctx context.Context, in *v1beta17.SetDefaultAppProviderForMimeTypeRequest, opts ...grpc.CallOption) (*v1beta17.SetDefaultAppProviderForMimeTypeResponse, error)
	// Gets the information about a user by the user id.
	GetUser(ctx context.Context, in *v1beta18.GetUserRequest, opts ...grpc.CallOption) (*v1beta18.GetUserResponse, error)
	// Gets the information about a user based on a specified claim.
	GetUserByClaim(ctx context.Context, in *v1beta18.GetUserByClaimRequest, opts ...grpc.CallOption) (*v1beta18.GetUserByClaimResponse, error)
	// Gets the groups of a user.
	GetUserGroups(ctx context.Context, in *v1beta18.GetUserGroupsRequest, opts ...grpc.CallOption) (*v1beta18.GetUserGroupsResponse, error)
	// Finds users by any attribute of the user.
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(ctx context.Context, in *v1beta18.FindUsersRequest, opts ...grpc.CallOption) (*v1beta18.FindUsersResponse, error)
	// Gets the information about a group by the group id.
	GetGroup(ctx context.Context, in *v1beta19.GetGroupRequest, opts ...grpc.CallOption) (*v1beta19.GetGroupResponse, error)
	// Gets the information about a group based on a specified claim.
	GetGroupByClaim(ctx context.Context, in *v1beta19.GetGroupByClaimRequest, opts ...grpc.CallOption) (*v1beta19.GetGroupByClaimResponse, error)
	// Gets the members of a group.
	GetMembers(ctx context.Context, in *v1beta19.GetMembersRequest, opts ...grpc.CallOption) (*v1beta19.GetMembersResponse, error)
	// Tells if the group has a certain member.
	HasMember(ctx context.Context, in *v1beta19.HasMemberRequest, opts ...grpc.CallOption) (*v1beta19.HasMemberResponse, error)
	// TODO(labkode): to define the filters that make more sense.
	// Finds groups whose names match the specified filter.
	FindGroups(ctx context.Context, in *v1beta19.FindGroupsRequest, opts ...grpc.CallOption) (*v1beta19.FindGroupsResponse, error)
	// Returns a list of the available auth providers known by this registry.
	ListAuthProviders(ctx context.Context, in *v1beta110.ListAuthProvidersRequest, opts ...grpc.CallOption) (*ListAuthProvidersResponse, error)
	// Returns the home path for the given authenticated user.
	// When a user has access to multiple storage providers, one of them is the home.
	GetHome(ctx context.Context, in *v1beta11.GetHomeRequest, opts ...grpc.CallOption) (*v1beta11.GetHomeResponse, error)
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(ctx context.Context, in *v1beta111.GenerateInviteTokenRequest, opts ...grpc.CallOption) (*v1beta111.GenerateInviteTokenResponse, error)
	// Lists the valid tokens generated by the user.
	ListInviteTokens(ctx context.Context, in *v1beta111.ListInviteTokensRequest, opts ...grpc.CallOption) (*v1beta111.ListInviteTokensResponse, error)
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(ctx context.Context, in *v1beta111.ForwardInviteRequest, opts ...grpc.CallOption) (*v1beta111.ForwardInviteResponse, error)
	// Completes an invitation acceptance.
	AcceptInvite(ctx context.Context, in *v1beta111.AcceptInviteRequest, opts ...grpc.CallOption) (*v1beta111.AcceptInviteResponse, error)
	// Retrieves details about a remote user who has accepted an invite to share.
	GetAcceptedUser(ctx context.Context, in *v1beta111.GetAcceptedUserRequest, opts ...grpc.CallOption) (*v1beta111.GetAcceptedUserResponse, error)
	// Finds users who accepted invite tokens by their attributes.
	FindAcceptedUsers(ctx context.Context, in *v1beta111.FindAcceptedUsersRequest, opts ...grpc.CallOption) (*v1beta111.FindAcceptedUsersResponse, error)
	// Delete a previously accepted remote user, that is unfriend that user.
	DeleteAcceptedUser(ctx context.Context, in *v1beta111.DeleteAcceptedUserRequest, opts ...grpc.CallOption) (*v1beta111.DeleteAcceptedUserResponse, error)
	// Check if a given system provider is registered in the mesh or not.
	// MUST return CODE_UNAUTHENTICATED if the system is not registered
	IsProviderAllowed(ctx context.Context, in *v1beta112.IsProviderAllowedRequest, opts ...grpc.CallOption) (*v1beta112.IsProviderAllowedResponse, error)
	// Get the information of the provider identified by a specific domain.
	// MUST return CODE_NOT_FOUND if the sync'n'share system provider does not exist.
	GetInfoByDomain(ctx context.Context, in *v1beta112.GetInfoByDomainRequest, opts ...grpc.CallOption) (*v1beta112.GetInfoByDomainResponse, error)
	// Get the information of all the providers registered in the mesh.
	ListAllProviders(ctx context.Context, in *v1beta112.ListAllProvidersRequest, opts ...grpc.CallOption) (*v1beta112.ListAllProvidersResponse, error)
	// Creates a new OCM share.
	CreateOCMCoreShare(ctx context.Context, in *v1beta113.CreateOCMCoreShareRequest, opts ...grpc.CallOption) (*v1beta113.CreateOCMCoreShareResponse, error)
	// Updates an OCM share.
	UpdateOCMCoreShare(ctx context.Context, in *v1beta113.UpdateOCMCoreShareRequest, opts ...grpc.CallOption) (*v1beta113.UpdateOCMCoreShareResponse, error)
	// Deletes an OCM share.
	DeleteOCMCoreShare(ctx context.Context, in *v1beta113.DeleteOCMCoreShareRequest, opts ...grpc.CallOption) (*v1beta113.DeleteOCMCoreShareResponse, error)
	// Requests creation of a transfer.
	CreateTransfer(ctx context.Context, in *v1beta114.CreateTransferRequest, opts ...grpc.CallOption) (*v1beta114.CreateTransferResponse, error)
	// Requests a transfer status.
	GetTransferStatus(ctx context.Context, in *v1beta114.GetTransferStatusRequest, opts ...grpc.CallOption) (*v1beta114.GetTransferStatusResponse, error)
	// Requests to cancel a transfer.
	CancelTransfer(ctx context.Context, in *v1beta114.CancelTransferRequest, opts ...grpc.CallOption) (*v1beta114.CancelTransferResponse, error)
	// Requests a list of transfers received by the authenticated principle.
	ListTransfers(ctx context.Context, in *v1beta114.ListTransfersRequest, opts ...grpc.CallOption) (*v1beta114.ListTransfersResponse, error)
	// Requests retrying a transfer.
	RetryTransfer(ctx context.Context, in *v1beta114.RetryTransferRequest, opts ...grpc.CallOption) (*v1beta114.RetryTransferResponse, error)
	// CheckPermission checks if a user or group has a certain permission.
	CheckPermission(ctx context.Context, in *v1beta115.CheckPermissionRequest, opts ...grpc.CallOption) (*v1beta115.CheckPermissionResponse, error)
}

type gatewayAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayAPIClient(cc grpc.ClientConnInterface) GatewayAPIClient {
	return &gatewayAPIClient{cc}
}

func (c *gatewayAPIClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) WhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_WhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GenerateAppPassword(ctx context.Context, in *v1beta1.GenerateAppPasswordRequest, opts ...grpc.CallOption) (*v1beta1.GenerateAppPasswordResponse, error) {
	out := new(v1beta1.GenerateAppPasswordResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GenerateAppPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListAppPasswords(ctx context.Context, in *v1beta1.ListAppPasswordsRequest, opts ...grpc.CallOption) (*v1beta1.ListAppPasswordsResponse, error) {
	out := new(v1beta1.ListAppPasswordsResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListAppPasswords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) InvalidateAppPassword(ctx context.Context, in *v1beta1.InvalidateAppPasswordRequest, opts ...grpc.CallOption) (*v1beta1.InvalidateAppPasswordResponse, error) {
	out := new(v1beta1.InvalidateAppPasswordResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_InvalidateAppPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetAppPassword(ctx context.Context, in *v1beta1.GetAppPasswordRequest, opts ...grpc.CallOption) (*v1beta1.GetAppPasswordResponse, error) {
	out := new(v1beta1.GetAppPasswordResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetAppPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateContainer(ctx context.Context, in *v1beta11.CreateContainerRequest, opts ...grpc.CallOption) (*v1beta11.CreateContainerResponse, error) {
	out := new(v1beta11.CreateContainerResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreateContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) TouchFile(ctx context.Context, in *v1beta11.TouchFileRequest, opts ...grpc.CallOption) (*v1beta11.TouchFileResponse, error) {
	out := new(v1beta11.TouchFileResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_TouchFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) Delete(ctx context.Context, in *v1beta11.DeleteRequest, opts ...grpc.CallOption) (*v1beta11.DeleteResponse, error) {
	out := new(v1beta11.DeleteResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetPath(ctx context.Context, in *v1beta11.GetPathRequest, opts ...grpc.CallOption) (*v1beta11.GetPathResponse, error) {
	out := new(v1beta11.GetPathResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetPath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*v1beta11.GetQuotaResponse, error) {
	out := new(v1beta11.GetQuotaResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) InitiateFileDownload(ctx context.Context, in *v1beta11.InitiateFileDownloadRequest, opts ...grpc.CallOption) (*InitiateFileDownloadResponse, error) {
	out := new(InitiateFileDownloadResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_InitiateFileDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) InitiateFileUpload(ctx context.Context, in *v1beta11.InitiateFileUploadRequest, opts ...grpc.CallOption) (*InitiateFileUploadResponse, error) {
	out := new(InitiateFileUploadResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_InitiateFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListContainerStream(ctx context.Context, in *v1beta11.ListContainerStreamRequest, opts ...grpc.CallOption) (GatewayAPI_ListContainerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayAPI_ServiceDesc.Streams[0], GatewayAPI_ListContainerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAPIListContainerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayAPI_ListContainerStreamClient interface {
	Recv() (*v1beta11.ListContainerStreamResponse, error)
	grpc.ClientStream
}

type gatewayAPIListContainerStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayAPIListContainerStreamClient) Recv() (*v1beta11.ListContainerStreamResponse, error) {
	m := new(v1beta11.ListContainerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayAPIClient) ListContainer(ctx context.Context, in *v1beta11.ListContainerRequest, opts ...grpc.CallOption) (*v1beta11.ListContainerResponse, error) {
	out := new(v1beta11.ListContainerResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListContainer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListFileVersions(ctx context.Context, in *v1beta11.ListFileVersionsRequest, opts ...grpc.CallOption) (*v1beta11.ListFileVersionsResponse, error) {
	out := new(v1beta11.ListFileVersionsResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListFileVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListRecycleStream(ctx context.Context, in *v1beta11.ListRecycleStreamRequest, opts ...grpc.CallOption) (GatewayAPI_ListRecycleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayAPI_ServiceDesc.Streams[1], GatewayAPI_ListRecycleStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayAPIListRecycleStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayAPI_ListRecycleStreamClient interface {
	Recv() (*v1beta11.ListRecycleStreamResponse, error)
	grpc.ClientStream
}

type gatewayAPIListRecycleStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayAPIListRecycleStreamClient) Recv() (*v1beta11.ListRecycleStreamResponse, error) {
	m := new(v1beta11.ListRecycleStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayAPIClient) ListRecycle(ctx context.Context, in *v1beta11.ListRecycleRequest, opts ...grpc.CallOption) (*v1beta11.ListRecycleResponse, error) {
	out := new(v1beta11.ListRecycleResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListRecycle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) Move(ctx context.Context, in *v1beta11.MoveRequest, opts ...grpc.CallOption) (*v1beta11.MoveResponse, error) {
	out := new(v1beta11.MoveResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_Move_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) PurgeRecycle(ctx context.Context, in *v1beta11.PurgeRecycleRequest, opts ...grpc.CallOption) (*v1beta11.PurgeRecycleResponse, error) {
	out := new(v1beta11.PurgeRecycleResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_PurgeRecycle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RestoreFileVersion(ctx context.Context, in *v1beta11.RestoreFileVersionRequest, opts ...grpc.CallOption) (*v1beta11.RestoreFileVersionResponse, error) {
	out := new(v1beta11.RestoreFileVersionResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_RestoreFileVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RestoreRecycleItem(ctx context.Context, in *v1beta11.RestoreRecycleItemRequest, opts ...grpc.CallOption) (*v1beta11.RestoreRecycleItemResponse, error) {
	out := new(v1beta11.RestoreRecycleItemResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_RestoreRecycleItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) Stat(ctx context.Context, in *v1beta11.StatRequest, opts ...grpc.CallOption) (*v1beta11.StatResponse, error) {
	out := new(v1beta11.StatResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateSymlink(ctx context.Context, in *v1beta11.CreateSymlinkRequest, opts ...grpc.CallOption) (*v1beta11.CreateSymlinkResponse, error) {
	out := new(v1beta11.CreateSymlinkResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreateSymlink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) SetArbitraryMetadata(ctx context.Context, in *v1beta11.SetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v1beta11.SetArbitraryMetadataResponse, error) {
	out := new(v1beta11.SetArbitraryMetadataResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_SetArbitraryMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UnsetArbitraryMetadata(ctx context.Context, in *v1beta11.UnsetArbitraryMetadataRequest, opts ...grpc.CallOption) (*v1beta11.UnsetArbitraryMetadataResponse, error) {
	out := new(v1beta11.UnsetArbitraryMetadataResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_UnsetArbitraryMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) SetLock(ctx context.Context, in *v1beta11.SetLockRequest, opts ...grpc.CallOption) (*v1beta11.SetLockResponse, error) {
	out := new(v1beta11.SetLockResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_SetLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetLock(ctx context.Context, in *v1beta11.GetLockRequest, opts ...grpc.CallOption) (*v1beta11.GetLockResponse, error) {
	out := new(v1beta11.GetLockResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RefreshLock(ctx context.Context, in *v1beta11.RefreshLockRequest, opts ...grpc.CallOption) (*v1beta11.RefreshLockResponse, error) {
	out := new(v1beta11.RefreshLockResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_RefreshLock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) Unlock(ctx context.Context, in *v1beta11.UnlockRequest, opts ...grpc.CallOption) (*v1beta11.UnlockResponse, error) {
	out := new(v1beta11.UnlockResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_Unlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateHome(ctx context.Context, in *v1beta11.CreateHomeRequest, opts ...grpc.CallOption) (*v1beta11.CreateHomeResponse, error) {
	out := new(v1beta11.CreateHomeResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreateHome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateStorageSpace(ctx context.Context, in *v1beta11.CreateStorageSpaceRequest, opts ...grpc.CallOption) (*v1beta11.CreateStorageSpaceResponse, error) {
	out := new(v1beta11.CreateStorageSpaceResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreateStorageSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListStorageSpaces(ctx context.Context, in *v1beta11.ListStorageSpacesRequest, opts ...grpc.CallOption) (*v1beta11.ListStorageSpacesResponse, error) {
	out := new(v1beta11.ListStorageSpacesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListStorageSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateStorageSpace(ctx context.Context, in *v1beta11.UpdateStorageSpaceRequest, opts ...grpc.CallOption) (*v1beta11.UpdateStorageSpaceResponse, error) {
	out := new(v1beta11.UpdateStorageSpaceResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_UpdateStorageSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) DeleteStorageSpace(ctx context.Context, in *v1beta11.DeleteStorageSpaceRequest, opts ...grpc.CallOption) (*v1beta11.DeleteStorageSpaceResponse, error) {
	out := new(v1beta11.DeleteStorageSpaceResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_DeleteStorageSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) OpenInApp(ctx context.Context, in *OpenInAppRequest, opts ...grpc.CallOption) (*v1beta12.OpenInAppResponse, error) {
	out := new(v1beta12.OpenInAppResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_OpenInApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateShare(ctx context.Context, in *v1beta13.CreateShareRequest, opts ...grpc.CallOption) (*v1beta13.CreateShareResponse, error) {
	out := new(v1beta13.CreateShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreateShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RemoveShare(ctx context.Context, in *v1beta13.RemoveShareRequest, opts ...grpc.CallOption) (*v1beta13.RemoveShareResponse, error) {
	out := new(v1beta13.RemoveShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_RemoveShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetShare(ctx context.Context, in *v1beta13.GetShareRequest, opts ...grpc.CallOption) (*v1beta13.GetShareResponse, error) {
	out := new(v1beta13.GetShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListShares(ctx context.Context, in *v1beta13.ListSharesRequest, opts ...grpc.CallOption) (*v1beta13.ListSharesResponse, error) {
	out := new(v1beta13.ListSharesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListExistingShares(ctx context.Context, in *v1beta13.ListSharesRequest, opts ...grpc.CallOption) (*ListExistingSharesResponse, error) {
	out := new(ListExistingSharesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListExistingShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateShare(ctx context.Context, in *v1beta13.UpdateShareRequest, opts ...grpc.CallOption) (*v1beta13.UpdateShareResponse, error) {
	out := new(v1beta13.UpdateShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_UpdateShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListReceivedShares(ctx context.Context, in *v1beta13.ListReceivedSharesRequest, opts ...grpc.CallOption) (*v1beta13.ListReceivedSharesResponse, error) {
	out := new(v1beta13.ListReceivedSharesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListReceivedShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListExistingReceivedShares(ctx context.Context, in *v1beta13.ListReceivedSharesRequest, opts ...grpc.CallOption) (*ListExistingReceivedSharesResponse, error) {
	out := new(ListExistingReceivedSharesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListExistingReceivedShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateReceivedShare(ctx context.Context, in *v1beta13.UpdateReceivedShareRequest, opts ...grpc.CallOption) (*v1beta13.UpdateReceivedShareResponse, error) {
	out := new(v1beta13.UpdateReceivedShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_UpdateReceivedShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetReceivedShare(ctx context.Context, in *v1beta13.GetReceivedShareRequest, opts ...grpc.CallOption) (*v1beta13.GetReceivedShareResponse, error) {
	out := new(v1beta13.GetReceivedShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetReceivedShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) SetKey(ctx context.Context, in *v1beta14.SetKeyRequest, opts ...grpc.CallOption) (*v1beta14.SetKeyResponse, error) {
	out := new(v1beta14.SetKeyResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_SetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetKey(ctx context.Context, in *v1beta14.GetKeyRequest, opts ...grpc.CallOption) (*v1beta14.GetKeyResponse, error) {
	out := new(v1beta14.GetKeyResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreatePublicShare(ctx context.Context, in *v1beta15.CreatePublicShareRequest, opts ...grpc.CallOption) (*v1beta15.CreatePublicShareResponse, error) {
	out := new(v1beta15.CreatePublicShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreatePublicShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RemovePublicShare(ctx context.Context, in *v1beta15.RemovePublicShareRequest, opts ...grpc.CallOption) (*v1beta15.RemovePublicShareResponse, error) {
	out := new(v1beta15.RemovePublicShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_RemovePublicShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetPublicShare(ctx context.Context, in *v1beta15.GetPublicShareRequest, opts ...grpc.CallOption) (*v1beta15.GetPublicShareResponse, error) {
	out := new(v1beta15.GetPublicShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetPublicShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetPublicShareByToken(ctx context.Context, in *v1beta15.GetPublicShareByTokenRequest, opts ...grpc.CallOption) (*v1beta15.GetPublicShareByTokenResponse, error) {
	out := new(v1beta15.GetPublicShareByTokenResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetPublicShareByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListPublicShares(ctx context.Context, in *v1beta15.ListPublicSharesRequest, opts ...grpc.CallOption) (*v1beta15.ListPublicSharesResponse, error) {
	out := new(v1beta15.ListPublicSharesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListPublicShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListExistingPublicShares(ctx context.Context, in *v1beta15.ListPublicSharesRequest, opts ...grpc.CallOption) (*ListExistingPublicSharesResponse, error) {
	out := new(ListExistingPublicSharesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListExistingPublicShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdatePublicShare(ctx context.Context, in *v1beta15.UpdatePublicShareRequest, opts ...grpc.CallOption) (*v1beta15.UpdatePublicShareResponse, error) {
	out := new(v1beta15.UpdatePublicShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_UpdatePublicShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateOCMShare(ctx context.Context, in *v1beta16.CreateOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.CreateOCMShareResponse, error) {
	out := new(v1beta16.CreateOCMShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreateOCMShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RemoveOCMShare(ctx context.Context, in *v1beta16.RemoveOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.RemoveOCMShareResponse, error) {
	out := new(v1beta16.RemoveOCMShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_RemoveOCMShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetOCMShare(ctx context.Context, in *v1beta16.GetOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.GetOCMShareResponse, error) {
	out := new(v1beta16.GetOCMShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetOCMShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetOCMShareByToken(ctx context.Context, in *v1beta16.GetOCMShareByTokenRequest, opts ...grpc.CallOption) (*v1beta16.GetOCMShareByTokenResponse, error) {
	out := new(v1beta16.GetOCMShareByTokenResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetOCMShareByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListOCMShares(ctx context.Context, in *v1beta16.ListOCMSharesRequest, opts ...grpc.CallOption) (*v1beta16.ListOCMSharesResponse, error) {
	out := new(v1beta16.ListOCMSharesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListOCMShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateOCMShare(ctx context.Context, in *v1beta16.UpdateOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.UpdateOCMShareResponse, error) {
	out := new(v1beta16.UpdateOCMShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_UpdateOCMShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListReceivedOCMShares(ctx context.Context, in *v1beta16.ListReceivedOCMSharesRequest, opts ...grpc.CallOption) (*v1beta16.ListReceivedOCMSharesResponse, error) {
	out := new(v1beta16.ListReceivedOCMSharesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListReceivedOCMShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateReceivedOCMShare(ctx context.Context, in *v1beta16.UpdateReceivedOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.UpdateReceivedOCMShareResponse, error) {
	out := new(v1beta16.UpdateReceivedOCMShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_UpdateReceivedOCMShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetReceivedOCMShare(ctx context.Context, in *v1beta16.GetReceivedOCMShareRequest, opts ...grpc.CallOption) (*v1beta16.GetReceivedOCMShareResponse, error) {
	out := new(v1beta16.GetReceivedOCMShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetReceivedOCMShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetAppProviders(ctx context.Context, in *v1beta17.GetAppProvidersRequest, opts ...grpc.CallOption) (*v1beta17.GetAppProvidersResponse, error) {
	out := new(v1beta17.GetAppProvidersResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetAppProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) AddAppProvider(ctx context.Context, in *v1beta17.AddAppProviderRequest, opts ...grpc.CallOption) (*v1beta17.AddAppProviderResponse, error) {
	out := new(v1beta17.AddAppProviderResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_AddAppProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListAppProviders(ctx context.Context, in *v1beta17.ListAppProvidersRequest, opts ...grpc.CallOption) (*v1beta17.ListAppProvidersResponse, error) {
	out := new(v1beta17.ListAppProvidersResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListAppProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListSupportedMimeTypes(ctx context.Context, in *v1beta17.ListSupportedMimeTypesRequest, opts ...grpc.CallOption) (*v1beta17.ListSupportedMimeTypesResponse, error) {
	out := new(v1beta17.ListSupportedMimeTypesResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListSupportedMimeTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetDefaultAppProviderForMimeType(ctx context.Context, in *v1beta17.GetDefaultAppProviderForMimeTypeRequest, opts ...grpc.CallOption) (*v1beta17.GetDefaultAppProviderForMimeTypeResponse, error) {
	out := new(v1beta17.GetDefaultAppProviderForMimeTypeResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetDefaultAppProviderForMimeType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) SetDefaultAppProviderForMimeType(ctx context.Context, in *v1beta17.SetDefaultAppProviderForMimeTypeRequest, opts ...grpc.CallOption) (*v1beta17.SetDefaultAppProviderForMimeTypeResponse, error) {
	out := new(v1beta17.SetDefaultAppProviderForMimeTypeResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_SetDefaultAppProviderForMimeType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetUser(ctx context.Context, in *v1beta18.GetUserRequest, opts ...grpc.CallOption) (*v1beta18.GetUserResponse, error) {
	out := new(v1beta18.GetUserResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetUserByClaim(ctx context.Context, in *v1beta18.GetUserByClaimRequest, opts ...grpc.CallOption) (*v1beta18.GetUserByClaimResponse, error) {
	out := new(v1beta18.GetUserByClaimResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetUserByClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetUserGroups(ctx context.Context, in *v1beta18.GetUserGroupsRequest, opts ...grpc.CallOption) (*v1beta18.GetUserGroupsResponse, error) {
	out := new(v1beta18.GetUserGroupsResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetUserGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) FindUsers(ctx context.Context, in *v1beta18.FindUsersRequest, opts ...grpc.CallOption) (*v1beta18.FindUsersResponse, error) {
	out := new(v1beta18.FindUsersResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_FindUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetGroup(ctx context.Context, in *v1beta19.GetGroupRequest, opts ...grpc.CallOption) (*v1beta19.GetGroupResponse, error) {
	out := new(v1beta19.GetGroupResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetGroupByClaim(ctx context.Context, in *v1beta19.GetGroupByClaimRequest, opts ...grpc.CallOption) (*v1beta19.GetGroupByClaimResponse, error) {
	out := new(v1beta19.GetGroupByClaimResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetGroupByClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetMembers(ctx context.Context, in *v1beta19.GetMembersRequest, opts ...grpc.CallOption) (*v1beta19.GetMembersResponse, error) {
	out := new(v1beta19.GetMembersResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) HasMember(ctx context.Context, in *v1beta19.HasMemberRequest, opts ...grpc.CallOption) (*v1beta19.HasMemberResponse, error) {
	out := new(v1beta19.HasMemberResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_HasMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) FindGroups(ctx context.Context, in *v1beta19.FindGroupsRequest, opts ...grpc.CallOption) (*v1beta19.FindGroupsResponse, error) {
	out := new(v1beta19.FindGroupsResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_FindGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListAuthProviders(ctx context.Context, in *v1beta110.ListAuthProvidersRequest, opts ...grpc.CallOption) (*ListAuthProvidersResponse, error) {
	out := new(ListAuthProvidersResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListAuthProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetHome(ctx context.Context, in *v1beta11.GetHomeRequest, opts ...grpc.CallOption) (*v1beta11.GetHomeResponse, error) {
	out := new(v1beta11.GetHomeResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetHome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GenerateInviteToken(ctx context.Context, in *v1beta111.GenerateInviteTokenRequest, opts ...grpc.CallOption) (*v1beta111.GenerateInviteTokenResponse, error) {
	out := new(v1beta111.GenerateInviteTokenResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GenerateInviteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListInviteTokens(ctx context.Context, in *v1beta111.ListInviteTokensRequest, opts ...grpc.CallOption) (*v1beta111.ListInviteTokensResponse, error) {
	out := new(v1beta111.ListInviteTokensResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListInviteTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ForwardInvite(ctx context.Context, in *v1beta111.ForwardInviteRequest, opts ...grpc.CallOption) (*v1beta111.ForwardInviteResponse, error) {
	out := new(v1beta111.ForwardInviteResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ForwardInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) AcceptInvite(ctx context.Context, in *v1beta111.AcceptInviteRequest, opts ...grpc.CallOption) (*v1beta111.AcceptInviteResponse, error) {
	out := new(v1beta111.AcceptInviteResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_AcceptInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetAcceptedUser(ctx context.Context, in *v1beta111.GetAcceptedUserRequest, opts ...grpc.CallOption) (*v1beta111.GetAcceptedUserResponse, error) {
	out := new(v1beta111.GetAcceptedUserResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetAcceptedUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) FindAcceptedUsers(ctx context.Context, in *v1beta111.FindAcceptedUsersRequest, opts ...grpc.CallOption) (*v1beta111.FindAcceptedUsersResponse, error) {
	out := new(v1beta111.FindAcceptedUsersResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_FindAcceptedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) DeleteAcceptedUser(ctx context.Context, in *v1beta111.DeleteAcceptedUserRequest, opts ...grpc.CallOption) (*v1beta111.DeleteAcceptedUserResponse, error) {
	out := new(v1beta111.DeleteAcceptedUserResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_DeleteAcceptedUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) IsProviderAllowed(ctx context.Context, in *v1beta112.IsProviderAllowedRequest, opts ...grpc.CallOption) (*v1beta112.IsProviderAllowedResponse, error) {
	out := new(v1beta112.IsProviderAllowedResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_IsProviderAllowed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetInfoByDomain(ctx context.Context, in *v1beta112.GetInfoByDomainRequest, opts ...grpc.CallOption) (*v1beta112.GetInfoByDomainResponse, error) {
	out := new(v1beta112.GetInfoByDomainResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetInfoByDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListAllProviders(ctx context.Context, in *v1beta112.ListAllProvidersRequest, opts ...grpc.CallOption) (*v1beta112.ListAllProvidersResponse, error) {
	out := new(v1beta112.ListAllProvidersResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListAllProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateOCMCoreShare(ctx context.Context, in *v1beta113.CreateOCMCoreShareRequest, opts ...grpc.CallOption) (*v1beta113.CreateOCMCoreShareResponse, error) {
	out := new(v1beta113.CreateOCMCoreShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreateOCMCoreShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) UpdateOCMCoreShare(ctx context.Context, in *v1beta113.UpdateOCMCoreShareRequest, opts ...grpc.CallOption) (*v1beta113.UpdateOCMCoreShareResponse, error) {
	out := new(v1beta113.UpdateOCMCoreShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_UpdateOCMCoreShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) DeleteOCMCoreShare(ctx context.Context, in *v1beta113.DeleteOCMCoreShareRequest, opts ...grpc.CallOption) (*v1beta113.DeleteOCMCoreShareResponse, error) {
	out := new(v1beta113.DeleteOCMCoreShareResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_DeleteOCMCoreShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CreateTransfer(ctx context.Context, in *v1beta114.CreateTransferRequest, opts ...grpc.CallOption) (*v1beta114.CreateTransferResponse, error) {
	out := new(v1beta114.CreateTransferResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CreateTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) GetTransferStatus(ctx context.Context, in *v1beta114.GetTransferStatusRequest, opts ...grpc.CallOption) (*v1beta114.GetTransferStatusResponse, error) {
	out := new(v1beta114.GetTransferStatusResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_GetTransferStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CancelTransfer(ctx context.Context, in *v1beta114.CancelTransferRequest, opts ...grpc.CallOption) (*v1beta114.CancelTransferResponse, error) {
	out := new(v1beta114.CancelTransferResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CancelTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListTransfers(ctx context.Context, in *v1beta114.ListTransfersRequest, opts ...grpc.CallOption) (*v1beta114.ListTransfersResponse, error) {
	out := new(v1beta114.ListTransfersResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_ListTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) RetryTransfer(ctx context.Context, in *v1beta114.RetryTransferRequest, opts ...grpc.CallOption) (*v1beta114.RetryTransferResponse, error) {
	out := new(v1beta114.RetryTransferResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_RetryTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) CheckPermission(ctx context.Context, in *v1beta115.CheckPermissionRequest, opts ...grpc.CallOption) (*v1beta115.CheckPermissionResponse, error) {
	out := new(v1beta115.CheckPermissionResponse)
	err := c.cc.Invoke(ctx, GatewayAPI_CheckPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAPIServer is the server API for GatewayAPI service.
// All implementations should embed UnimplementedGatewayAPIServer
// for forward compatibility
type GatewayAPIServer interface {
	// Authenticates a user.
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	// WhoAmI returns the information for a user.
	WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	// GenerateAppPassword creates a password with specified scope to be used by
	// third-party applications.
	GenerateAppPassword(context.Context, *v1beta1.GenerateAppPasswordRequest) (*v1beta1.GenerateAppPasswordResponse, error)
	// ListAppPasswords lists the application passwords created by a user.
	ListAppPasswords(context.Context, *v1beta1.ListAppPasswordsRequest) (*v1beta1.ListAppPasswordsResponse, error)
	// InvalidateAppPassword invalidates a generated password.
	InvalidateAppPassword(context.Context, *v1beta1.InvalidateAppPasswordRequest) (*v1beta1.InvalidateAppPasswordResponse, error)
	// GetAppPassword retrieves the password information by the combination of username and password.
	GetAppPassword(context.Context, *v1beta1.GetAppPasswordRequest) (*v1beta1.GetAppPasswordResponse, error)
	// Creates a new resource of type container.
	// MUST return CODE_FAILED_PRECONDITION if the container
	// cannot be created at the specified reference.
	CreateContainer(context.Context, *v1beta11.CreateContainerRequest) (*v1beta11.CreateContainerResponse, error)
	// Creates a new resource of type file.
	// MUST return CODE_FAILED_PRECONDITION if the file
	// cannot be created at the specified reference.
	TouchFile(context.Context, *v1beta11.TouchFileRequest) (*v1beta11.TouchFileResponse, error)
	// Deletes a resource.
	// If a resource specifies the non-empty container (directory, ...),
	// then the entire directory is deleted recursively.
	// If a resource specifies a reference or symlink type, only the reference is removed (not the target).
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_TOO_EARLY if some are not finished job over resource is still in process.
	Delete(context.Context, *v1beta11.DeleteRequest) (*v1beta11.DeleteResponse, error)
	// Returns the path reference for
	// the provided resource id reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	GetPath(context.Context, *v1beta11.GetPathRequest) (*v1beta11.GetPathResponse, error)
	// Returns the quota available under the provided
	// reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist
	// MUST return CODE_RESOURCE_EXHAUSTED on exceeded quota limits.
	GetQuota(context.Context, *GetQuotaRequest) (*v1beta11.GetQuotaResponse, error)
	// Initiates the download of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileDownload(context.Context, *v1beta11.InitiateFileDownloadRequest) (*InitiateFileDownloadResponse, error)
	// Initiates the upload of a file using an
	// out-of-band data transfer mechanism.
	InitiateFileUpload(context.Context, *v1beta11.InitiateFileUploadRequest) (*InitiateFileUploadResponse, error)
	// Returns a stream of resource informations
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainerStream(*v1beta11.ListContainerStreamRequest, GatewayAPI_ListContainerStreamServer) error
	// Returns a list of resource information
	// for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exists.
	ListContainer(context.Context, *v1beta11.ListContainerRequest) (*v1beta11.ListContainerResponse, error)
	// Returns a list of the versions for a resource of
	// type file at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_OK and MUST return an empty list if no versions are available.
	// TODO: What code if resource not of type file?
	ListFileVersions(context.Context, *v1beta11.ListFileVersionsRequest) (*v1beta11.ListFileVersionsResponse, error)
	// Returns a stream of recycle items for this storage provider.
	ListRecycleStream(*v1beta11.ListRecycleStreamRequest, GatewayAPI_ListRecycleStreamServer) error
	// Returns a list of recycle items for this storage provider.
	// MUST return CODE_OK and MUST return an empty list if no recycle items are available.
	ListRecycle(context.Context, *v1beta11.ListRecycleRequest) (*v1beta11.ListRecycleResponse, error)
	// Moves a resource from one reference to another.
	// MUST return CODE_NOT_FOUND if any of the references do not exist.
	// MUST return CODE_FAILED_PRECONDITION if the source reference.
	// MUST return CODE_TOO_EARLY if some are not finished job over resource is still in process.
	// cannot be moved to the destination reference.
	Move(context.Context, *v1beta11.MoveRequest) (*v1beta11.MoveResponse, error)
	// Permanently removes a recycle item from the recycle.
	// This operation is irrevocable.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	PurgeRecycle(context.Context, *v1beta11.PurgeRecycleRequest) (*v1beta11.PurgeRecycleResponse, error)
	// Restores a file version for the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_NOT_FOUND if the version does not exist.
	RestoreFileVersion(context.Context, *v1beta11.RestoreFileVersionRequest) (*v1beta11.RestoreFileVersionResponse, error)
	// Restores a recycle item from the recycle.
	// MUST return CODE_NOT_FOUND if the recycle item id does not exist.
	// MUST return CODE_FAILED_PRECONDITION if the restore_path is non-empty
	// and the recycle item cannot be restored to the restore_path.
	RestoreRecycleItem(context.Context, *v1beta11.RestoreRecycleItemRequest) (*v1beta11.RestoreRecycleItemResponse, error)
	// Returns the resource information at the provided reference.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	Stat(context.Context, *v1beta11.StatRequest) (*v1beta11.StatResponse, error)
	// Creates a symlink to another resource.
	CreateSymlink(context.Context, *v1beta11.CreateSymlinkRequest) (*v1beta11.CreateSymlinkResponse, error)
	// Sets arbitrary metadata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	SetArbitraryMetadata(context.Context, *v1beta11.SetArbitraryMetadataRequest) (*v1beta11.SetArbitraryMetadataResponse, error)
	// Unsets arbitrary metdata into a storage resource.
	// Arbitrary metadata is returned in a cs3.storage.provider.v1beta1.ResourceInfo.
	UnsetArbitraryMetadata(context.Context, *v1beta11.UnsetArbitraryMetadataRequest) (*v1beta11.UnsetArbitraryMetadataResponse, error)
	// Locks a storage resource.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_FAILED_PRECONDITION if the reference is already locked.
	// In addition, the implementation MUST ensure atomicity when multiple users
	// concurrently attempt to set a lock.
	// The caller MUST have write permissions on the resource.
	SetLock(context.Context, *v1beta11.SetLockRequest) (*v1beta11.SetLockResponse, error)
	// Gets the lock metadata of a storage resource.
	// MUST return CODE_NOT_FOUND if the reference does not exist or is not locked.
	// The caller MUST have read permissions on the resource.
	GetLock(context.Context, *v1beta11.GetLockRequest) (*v1beta11.GetLockResponse, error)
	// Refreshes the lock metadata of a storage resource.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_FAILED_PRECONDITION if the reference is not locked
	// or if the caller does not hold the lock.
	// The caller MUST have write permissions on the resource.
	RefreshLock(context.Context, *v1beta11.RefreshLockRequest) (*v1beta11.RefreshLockResponse, error)
	// Unlocks a storage resource.
	// MUST return CODE_NOT_FOUND if the reference does not exist.
	// MUST return CODE_FAILED_PRECONDITION if the reference is not locked
	// or if the caller does not hold the lock.
	// The caller MUST have write permissions on the resource.
	Unlock(context.Context, *v1beta11.UnlockRequest) (*v1beta11.UnlockResponse, error)
	// Creates the home directory for a user.
	CreateHome(context.Context, *v1beta11.CreateHomeRequest) (*v1beta11.CreateHomeResponse, error)
	// Creates a storage space.
	CreateStorageSpace(context.Context, *v1beta11.CreateStorageSpaceRequest) (*v1beta11.CreateStorageSpaceResponse, error)
	// Lists storage spaces.
	ListStorageSpaces(context.Context, *v1beta11.ListStorageSpacesRequest) (*v1beta11.ListStorageSpacesResponse, error)
	// Updates a storage space.
	UpdateStorageSpace(context.Context, *v1beta11.UpdateStorageSpaceRequest) (*v1beta11.UpdateStorageSpaceResponse, error)
	// Deletes a storage space.
	DeleteStorageSpace(context.Context, *v1beta11.DeleteStorageSpaceRequest) (*v1beta11.DeleteStorageSpaceResponse, error)
	// Returns the App URL and all necessary info to open a resource in an online editor.
	// MUST return CODE_NOT_FOUND if the resource does not exist.
	OpenInApp(context.Context, *OpenInAppRequest) (*v1beta12.OpenInAppResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_LOCKED if the resource reference already locked.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateShare(context.Context, *v1beta13.CreateShareRequest) (*v1beta13.CreateShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveShare(context.Context, *v1beta13.RemoveShareRequest) (*v1beta13.RemoveShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetShare(context.Context, *v1beta13.GetShareRequest) (*v1beta13.GetShareResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListShares(context.Context, *v1beta13.ListSharesRequest) (*v1beta13.ListSharesResponse, error)
	// List all existing shares the authenticated principal has created,
	// including their storage resource information.
	ListExistingShares(context.Context, *v1beta13.ListSharesRequest) (*ListExistingSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateShare(context.Context, *v1beta13.UpdateShareRequest) (*v1beta13.UpdateShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedShares(context.Context, *v1beta13.ListReceivedSharesRequest) (*v1beta13.ListReceivedSharesResponse, error)
	// List all existing shares the authenticated principal has received,
	// including their storage resource information.
	ListExistingReceivedShares(context.Context, *v1beta13.ListReceivedSharesRequest) (*ListExistingReceivedSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedShare(context.Context, *v1beta13.UpdateReceivedShareRequest) (*v1beta13.UpdateReceivedShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedShare(context.Context, *v1beta13.GetReceivedShareRequest) (*v1beta13.GetReceivedShareResponse, error)
	// Maps the key-value pair.
	SetKey(context.Context, *v1beta14.SetKeyRequest) (*v1beta14.SetKeyResponse, error)
	// Returns the value associated with the
	// requested key.
	GetKey(context.Context, *v1beta14.GetKeyRequest) (*v1beta14.GetKeyResponse, error)
	// Creates a new share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreatePublicShare(context.Context, *v1beta15.CreatePublicShareRequest) (*v1beta15.CreatePublicShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemovePublicShare(context.Context, *v1beta15.RemovePublicShareRequest) (*v1beta15.RemovePublicShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetPublicShare(context.Context, *v1beta15.GetPublicShareRequest) (*v1beta15.GetPublicShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetPublicShareByToken(context.Context, *v1beta15.GetPublicShareByTokenRequest) (*v1beta15.GetPublicShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListPublicShares(context.Context, *v1beta15.ListPublicSharesRequest) (*v1beta15.ListPublicSharesResponse, error)
	// List all existing shares the authenticated principal has created,
	// both as owner and creator, including their storage resource information.
	// If a filter is specified, only shares satisfying the filter MUST be returned.
	ListExistingPublicShares(context.Context, *v1beta15.ListPublicSharesRequest) (*ListExistingPublicSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdatePublicShare(context.Context, *v1beta15.UpdatePublicShareRequest) (*v1beta15.UpdatePublicShareResponse, error)
	// Creates a new ocm share.
	// MUST return CODE_NOT_FOUND if the resource reference does not exist.
	// MUST return CODE_ALREADY_EXISTS if the share already exists for the 4-tuple consisting of
	// (owner, shared_resource, grantee).
	// New shares MUST be created in the state SHARE_STATE_PENDING.
	CreateOCMShare(context.Context, *v1beta16.CreateOCMShareRequest) (*v1beta16.CreateOCMShareResponse, error)
	// Removes a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	RemoveOCMShare(context.Context, *v1beta16.RemoveOCMShareRequest) (*v1beta16.RemoveOCMShareResponse, error)
	// Gets share information for a single share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	GetOCMShare(context.Context, *v1beta16.GetOCMShareRequest) (*v1beta16.GetOCMShareResponse, error)
	// Gets share information for a single share by its unlisted token.
	// MUST return CODE_NOT_FOUND if the share does not exist.
	GetOCMShareByToken(context.Context, *v1beta16.GetOCMShareByTokenRequest) (*v1beta16.GetOCMShareByTokenResponse, error)
	// List the shares the authenticated principal has created,
	// both as owner and creator. If a filter is specified, only
	// shares satisfying the filter MUST be returned.
	ListOCMShares(context.Context, *v1beta16.ListOCMSharesRequest) (*v1beta16.ListOCMSharesResponse, error)
	// Updates a share.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateOCMShare(context.Context, *v1beta16.UpdateOCMShareRequest) (*v1beta16.UpdateOCMShareResponse, error)
	// List all shares the authenticated principal has received.
	ListReceivedOCMShares(context.Context, *v1beta16.ListReceivedOCMSharesRequest) (*v1beta16.ListReceivedOCMSharesResponse, error)
	// Update the received share to change the share state or the display name.
	// MUST return CODE_NOT_FOUND if the share reference does not exist.
	UpdateReceivedOCMShare(context.Context, *v1beta16.UpdateReceivedOCMShareRequest) (*v1beta16.UpdateReceivedOCMShareResponse, error)
	// Get the information for the given received share reference.
	// MUST return CODE_NOT_FOUND if the received share reference does not exist.
	GetReceivedOCMShare(context.Context, *v1beta16.GetReceivedOCMShareRequest) (*v1beta16.GetReceivedOCMShareResponse, error)
	// Returns the app providers that are capable of handling this resource info.
	// MUST return CODE_NOT_FOUND if no providers are available.
	GetAppProviders(context.Context, *v1beta17.GetAppProvidersRequest) (*v1beta17.GetAppProvidersResponse, error)
	// Registers a new app provider to the registry.
	AddAppProvider(context.Context, *v1beta17.AddAppProviderRequest) (*v1beta17.AddAppProviderResponse, error)
	// Returns a list of the available app providers known by this registry.
	ListAppProviders(context.Context, *v1beta17.ListAppProvidersRequest) (*v1beta17.ListAppProvidersResponse, error)
	// Returns a list of the supported mime types along with the apps which they can opened with.
	ListSupportedMimeTypes(context.Context, *v1beta17.ListSupportedMimeTypesRequest) (*v1beta17.ListSupportedMimeTypesResponse, error)
	// Returns the default app provider which serves a specified mime type.
	GetDefaultAppProviderForMimeType(context.Context, *v1beta17.GetDefaultAppProviderForMimeTypeRequest) (*v1beta17.GetDefaultAppProviderForMimeTypeResponse, error)
	// Sets the default app provider for a specified mime type.
	SetDefaultAppProviderForMimeType(context.Context, *v1beta17.SetDefaultAppProviderForMimeTypeRequest) (*v1beta17.SetDefaultAppProviderForMimeTypeResponse, error)
	// Gets the information about a user by the user id.
	GetUser(context.Context, *v1beta18.GetUserRequest) (*v1beta18.GetUserResponse, error)
	// Gets the information about a user based on a specified claim.
	GetUserByClaim(context.Context, *v1beta18.GetUserByClaimRequest) (*v1beta18.GetUserByClaimResponse, error)
	// Gets the groups of a user.
	GetUserGroups(context.Context, *v1beta18.GetUserGroupsRequest) (*v1beta18.GetUserGroupsResponse, error)
	// Finds users by any attribute of the user.
	// TODO(labkode): to define the filters that make more sense.
	FindUsers(context.Context, *v1beta18.FindUsersRequest) (*v1beta18.FindUsersResponse, error)
	// Gets the information about a group by the group id.
	GetGroup(context.Context, *v1beta19.GetGroupRequest) (*v1beta19.GetGroupResponse, error)
	// Gets the information about a group based on a specified claim.
	GetGroupByClaim(context.Context, *v1beta19.GetGroupByClaimRequest) (*v1beta19.GetGroupByClaimResponse, error)
	// Gets the members of a group.
	GetMembers(context.Context, *v1beta19.GetMembersRequest) (*v1beta19.GetMembersResponse, error)
	// Tells if the group has a certain member.
	HasMember(context.Context, *v1beta19.HasMemberRequest) (*v1beta19.HasMemberResponse, error)
	// TODO(labkode): to define the filters that make more sense.
	// Finds groups whose names match the specified filter.
	FindGroups(context.Context, *v1beta19.FindGroupsRequest) (*v1beta19.FindGroupsResponse, error)
	// Returns a list of the available auth providers known by this registry.
	ListAuthProviders(context.Context, *v1beta110.ListAuthProvidersRequest) (*ListAuthProvidersResponse, error)
	// Returns the home path for the given authenticated user.
	// When a user has access to multiple storage providers, one of them is the home.
	GetHome(context.Context, *v1beta11.GetHomeRequest) (*v1beta11.GetHomeResponse, error)
	// Generates a new token for the user with a validity of 24 hours.
	GenerateInviteToken(context.Context, *v1beta111.GenerateInviteTokenRequest) (*v1beta111.GenerateInviteTokenResponse, error)
	// Lists the valid tokens generated by the user.
	ListInviteTokens(context.Context, *v1beta111.ListInviteTokensRequest) (*v1beta111.ListInviteTokensResponse, error)
	// Forwards a received invite to the sync'n'share system provider.
	ForwardInvite(context.Context, *v1beta111.ForwardInviteRequest) (*v1beta111.ForwardInviteResponse, error)
	// Completes an invitation acceptance.
	AcceptInvite(context.Context, *v1beta111.AcceptInviteRequest) (*v1beta111.AcceptInviteResponse, error)
	// Retrieves details about a remote user who has accepted an invite to share.
	GetAcceptedUser(context.Context, *v1beta111.GetAcceptedUserRequest) (*v1beta111.GetAcceptedUserResponse, error)
	// Finds users who accepted invite tokens by their attributes.
	FindAcceptedUsers(context.Context, *v1beta111.FindAcceptedUsersRequest) (*v1beta111.FindAcceptedUsersResponse, error)
	// Delete a previously accepted remote user, that is unfriend that user.
	DeleteAcceptedUser(context.Context, *v1beta111.DeleteAcceptedUserRequest) (*v1beta111.DeleteAcceptedUserResponse, error)
	// Check if a given system provider is registered in the mesh or not.
	// MUST return CODE_UNAUTHENTICATED if the system is not registered
	IsProviderAllowed(context.Context, *v1beta112.IsProviderAllowedRequest) (*v1beta112.IsProviderAllowedResponse, error)
	// Get the information of the provider identified by a specific domain.
	// MUST return CODE_NOT_FOUND if the sync'n'share system provider does not exist.
	GetInfoByDomain(context.Context, *v1beta112.GetInfoByDomainRequest) (*v1beta112.GetInfoByDomainResponse, error)
	// Get the information of all the providers registered in the mesh.
	ListAllProviders(context.Context, *v1beta112.ListAllProvidersRequest) (*v1beta112.ListAllProvidersResponse, error)
	// Creates a new OCM share.
	CreateOCMCoreShare(context.Context, *v1beta113.CreateOCMCoreShareRequest) (*v1beta113.CreateOCMCoreShareResponse, error)
	// Updates an OCM share.
	UpdateOCMCoreShare(context.Context, *v1beta113.UpdateOCMCoreShareRequest) (*v1beta113.UpdateOCMCoreShareResponse, error)
	// Deletes an OCM share.
	DeleteOCMCoreShare(context.Context, *v1beta113.DeleteOCMCoreShareRequest) (*v1beta113.DeleteOCMCoreShareResponse, error)
	// Requests creation of a transfer.
	CreateTransfer(context.Context, *v1beta114.CreateTransferRequest) (*v1beta114.CreateTransferResponse, error)
	// Requests a transfer status.
	GetTransferStatus(context.Context, *v1beta114.GetTransferStatusRequest) (*v1beta114.GetTransferStatusResponse, error)
	// Requests to cancel a transfer.
	CancelTransfer(context.Context, *v1beta114.CancelTransferRequest) (*v1beta114.CancelTransferResponse, error)
	// Requests a list of transfers received by the authenticated principle.
	ListTransfers(context.Context, *v1beta114.ListTransfersRequest) (*v1beta114.ListTransfersResponse, error)
	// Requests retrying a transfer.
	RetryTransfer(context.Context, *v1beta114.RetryTransferRequest) (*v1beta114.RetryTransferResponse, error)
	// CheckPermission checks if a user or group has a certain permission.
	CheckPermission(context.Context, *v1beta115.CheckPermissionRequest) (*v1beta115.CheckPermissionResponse, error)
}

// UnimplementedGatewayAPIServer should be embedded to have forward compatible implementations.
type UnimplementedGatewayAPIServer struct {
}

func (UnimplementedGatewayAPIServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedGatewayAPIServer) WhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedGatewayAPIServer) GenerateAppPassword(context.Context, *v1beta1.GenerateAppPasswordRequest) (*v1beta1.GenerateAppPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAppPassword not implemented")
}
func (UnimplementedGatewayAPIServer) ListAppPasswords(context.Context, *v1beta1.ListAppPasswordsRequest) (*v1beta1.ListAppPasswordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppPasswords not implemented")
}
func (UnimplementedGatewayAPIServer) InvalidateAppPassword(context.Context, *v1beta1.InvalidateAppPasswordRequest) (*v1beta1.InvalidateAppPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAppPassword not implemented")
}
func (UnimplementedGatewayAPIServer) GetAppPassword(context.Context, *v1beta1.GetAppPasswordRequest) (*v1beta1.GetAppPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPassword not implemented")
}
func (UnimplementedGatewayAPIServer) CreateContainer(context.Context, *v1beta11.CreateContainerRequest) (*v1beta11.CreateContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedGatewayAPIServer) TouchFile(context.Context, *v1beta11.TouchFileRequest) (*v1beta11.TouchFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TouchFile not implemented")
}
func (UnimplementedGatewayAPIServer) Delete(context.Context, *v1beta11.DeleteRequest) (*v1beta11.DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGatewayAPIServer) GetPath(context.Context, *v1beta11.GetPathRequest) (*v1beta11.GetPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPath not implemented")
}
func (UnimplementedGatewayAPIServer) GetQuota(context.Context, *GetQuotaRequest) (*v1beta11.GetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuota not implemented")
}
func (UnimplementedGatewayAPIServer) InitiateFileDownload(context.Context, *v1beta11.InitiateFileDownloadRequest) (*InitiateFileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFileDownload not implemented")
}
func (UnimplementedGatewayAPIServer) InitiateFileUpload(context.Context, *v1beta11.InitiateFileUploadRequest) (*InitiateFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateFileUpload not implemented")
}
func (UnimplementedGatewayAPIServer) ListContainerStream(*v1beta11.ListContainerStreamRequest, GatewayAPI_ListContainerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListContainerStream not implemented")
}
func (UnimplementedGatewayAPIServer) ListContainer(context.Context, *v1beta11.ListContainerRequest) (*v1beta11.ListContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainer not implemented")
}
func (UnimplementedGatewayAPIServer) ListFileVersions(context.Context, *v1beta11.ListFileVersionsRequest) (*v1beta11.ListFileVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileVersions not implemented")
}
func (UnimplementedGatewayAPIServer) ListRecycleStream(*v1beta11.ListRecycleStreamRequest, GatewayAPI_ListRecycleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRecycleStream not implemented")
}
func (UnimplementedGatewayAPIServer) ListRecycle(context.Context, *v1beta11.ListRecycleRequest) (*v1beta11.ListRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecycle not implemented")
}
func (UnimplementedGatewayAPIServer) Move(context.Context, *v1beta11.MoveRequest) (*v1beta11.MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedGatewayAPIServer) PurgeRecycle(context.Context, *v1beta11.PurgeRecycleRequest) (*v1beta11.PurgeRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeRecycle not implemented")
}
func (UnimplementedGatewayAPIServer) RestoreFileVersion(context.Context, *v1beta11.RestoreFileVersionRequest) (*v1beta11.RestoreFileVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFileVersion not implemented")
}
func (UnimplementedGatewayAPIServer) RestoreRecycleItem(context.Context, *v1beta11.RestoreRecycleItemRequest) (*v1beta11.RestoreRecycleItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRecycleItem not implemented")
}
func (UnimplementedGatewayAPIServer) Stat(context.Context, *v1beta11.StatRequest) (*v1beta11.StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedGatewayAPIServer) CreateSymlink(context.Context, *v1beta11.CreateSymlinkRequest) (*v1beta11.CreateSymlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSymlink not implemented")
}
func (UnimplementedGatewayAPIServer) SetArbitraryMetadata(context.Context, *v1beta11.SetArbitraryMetadataRequest) (*v1beta11.SetArbitraryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArbitraryMetadata not implemented")
}
func (UnimplementedGatewayAPIServer) UnsetArbitraryMetadata(context.Context, *v1beta11.UnsetArbitraryMetadataRequest) (*v1beta11.UnsetArbitraryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetArbitraryMetadata not implemented")
}
func (UnimplementedGatewayAPIServer) SetLock(context.Context, *v1beta11.SetLockRequest) (*v1beta11.SetLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLock not implemented")
}
func (UnimplementedGatewayAPIServer) GetLock(context.Context, *v1beta11.GetLockRequest) (*v1beta11.GetLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (UnimplementedGatewayAPIServer) RefreshLock(context.Context, *v1beta11.RefreshLockRequest) (*v1beta11.RefreshLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshLock not implemented")
}
func (UnimplementedGatewayAPIServer) Unlock(context.Context, *v1beta11.UnlockRequest) (*v1beta11.UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedGatewayAPIServer) CreateHome(context.Context, *v1beta11.CreateHomeRequest) (*v1beta11.CreateHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHome not implemented")
}
func (UnimplementedGatewayAPIServer) CreateStorageSpace(context.Context, *v1beta11.CreateStorageSpaceRequest) (*v1beta11.CreateStorageSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageSpace not implemented")
}
func (UnimplementedGatewayAPIServer) ListStorageSpaces(context.Context, *v1beta11.ListStorageSpacesRequest) (*v1beta11.ListStorageSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorageSpaces not implemented")
}
func (UnimplementedGatewayAPIServer) UpdateStorageSpace(context.Context, *v1beta11.UpdateStorageSpaceRequest) (*v1beta11.UpdateStorageSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageSpace not implemented")
}
func (UnimplementedGatewayAPIServer) DeleteStorageSpace(context.Context, *v1beta11.DeleteStorageSpaceRequest) (*v1beta11.DeleteStorageSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageSpace not implemented")
}
func (UnimplementedGatewayAPIServer) OpenInApp(context.Context, *OpenInAppRequest) (*v1beta12.OpenInAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenInApp not implemented")
}
func (UnimplementedGatewayAPIServer) CreateShare(context.Context, *v1beta13.CreateShareRequest) (*v1beta13.CreateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShare not implemented")
}
func (UnimplementedGatewayAPIServer) RemoveShare(context.Context, *v1beta13.RemoveShareRequest) (*v1beta13.RemoveShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShare not implemented")
}
func (UnimplementedGatewayAPIServer) GetShare(context.Context, *v1beta13.GetShareRequest) (*v1beta13.GetShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (UnimplementedGatewayAPIServer) ListShares(context.Context, *v1beta13.ListSharesRequest) (*v1beta13.ListSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShares not implemented")
}
func (UnimplementedGatewayAPIServer) ListExistingShares(context.Context, *v1beta13.ListSharesRequest) (*ListExistingSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExistingShares not implemented")
}
func (UnimplementedGatewayAPIServer) UpdateShare(context.Context, *v1beta13.UpdateShareRequest) (*v1beta13.UpdateShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShare not implemented")
}
func (UnimplementedGatewayAPIServer) ListReceivedShares(context.Context, *v1beta13.ListReceivedSharesRequest) (*v1beta13.ListReceivedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedShares not implemented")
}
func (UnimplementedGatewayAPIServer) ListExistingReceivedShares(context.Context, *v1beta13.ListReceivedSharesRequest) (*ListExistingReceivedSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExistingReceivedShares not implemented")
}
func (UnimplementedGatewayAPIServer) UpdateReceivedShare(context.Context, *v1beta13.UpdateReceivedShareRequest) (*v1beta13.UpdateReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedShare not implemented")
}
func (UnimplementedGatewayAPIServer) GetReceivedShare(context.Context, *v1beta13.GetReceivedShareRequest) (*v1beta13.GetReceivedShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedShare not implemented")
}
func (UnimplementedGatewayAPIServer) SetKey(context.Context, *v1beta14.SetKeyRequest) (*v1beta14.SetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKey not implemented")
}
func (UnimplementedGatewayAPIServer) GetKey(context.Context, *v1beta14.GetKeyRequest) (*v1beta14.GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedGatewayAPIServer) CreatePublicShare(context.Context, *v1beta15.CreatePublicShareRequest) (*v1beta15.CreatePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicShare not implemented")
}
func (UnimplementedGatewayAPIServer) RemovePublicShare(context.Context, *v1beta15.RemovePublicShareRequest) (*v1beta15.RemovePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePublicShare not implemented")
}
func (UnimplementedGatewayAPIServer) GetPublicShare(context.Context, *v1beta15.GetPublicShareRequest) (*v1beta15.GetPublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicShare not implemented")
}
func (UnimplementedGatewayAPIServer) GetPublicShareByToken(context.Context, *v1beta15.GetPublicShareByTokenRequest) (*v1beta15.GetPublicShareByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicShareByToken not implemented")
}
func (UnimplementedGatewayAPIServer) ListPublicShares(context.Context, *v1beta15.ListPublicSharesRequest) (*v1beta15.ListPublicSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicShares not implemented")
}
func (UnimplementedGatewayAPIServer) ListExistingPublicShares(context.Context, *v1beta15.ListPublicSharesRequest) (*ListExistingPublicSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExistingPublicShares not implemented")
}
func (UnimplementedGatewayAPIServer) UpdatePublicShare(context.Context, *v1beta15.UpdatePublicShareRequest) (*v1beta15.UpdatePublicShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicShare not implemented")
}
func (UnimplementedGatewayAPIServer) CreateOCMShare(context.Context, *v1beta16.CreateOCMShareRequest) (*v1beta16.CreateOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOCMShare not implemented")
}
func (UnimplementedGatewayAPIServer) RemoveOCMShare(context.Context, *v1beta16.RemoveOCMShareRequest) (*v1beta16.RemoveOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOCMShare not implemented")
}
func (UnimplementedGatewayAPIServer) GetOCMShare(context.Context, *v1beta16.GetOCMShareRequest) (*v1beta16.GetOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOCMShare not implemented")
}
func (UnimplementedGatewayAPIServer) GetOCMShareByToken(context.Context, *v1beta16.GetOCMShareByTokenRequest) (*v1beta16.GetOCMShareByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOCMShareByToken not implemented")
}
func (UnimplementedGatewayAPIServer) ListOCMShares(context.Context, *v1beta16.ListOCMSharesRequest) (*v1beta16.ListOCMSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOCMShares not implemented")
}
func (UnimplementedGatewayAPIServer) UpdateOCMShare(context.Context, *v1beta16.UpdateOCMShareRequest) (*v1beta16.UpdateOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOCMShare not implemented")
}
func (UnimplementedGatewayAPIServer) ListReceivedOCMShares(context.Context, *v1beta16.ListReceivedOCMSharesRequest) (*v1beta16.ListReceivedOCMSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReceivedOCMShares not implemented")
}
func (UnimplementedGatewayAPIServer) UpdateReceivedOCMShare(context.Context, *v1beta16.UpdateReceivedOCMShareRequest) (*v1beta16.UpdateReceivedOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReceivedOCMShare not implemented")
}
func (UnimplementedGatewayAPIServer) GetReceivedOCMShare(context.Context, *v1beta16.GetReceivedOCMShareRequest) (*v1beta16.GetReceivedOCMShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedOCMShare not implemented")
}
func (UnimplementedGatewayAPIServer) GetAppProviders(context.Context, *v1beta17.GetAppProvidersRequest) (*v1beta17.GetAppProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppProviders not implemented")
}
func (UnimplementedGatewayAPIServer) AddAppProvider(context.Context, *v1beta17.AddAppProviderRequest) (*v1beta17.AddAppProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppProvider not implemented")
}
func (UnimplementedGatewayAPIServer) ListAppProviders(context.Context, *v1beta17.ListAppProvidersRequest) (*v1beta17.ListAppProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppProviders not implemented")
}
func (UnimplementedGatewayAPIServer) ListSupportedMimeTypes(context.Context, *v1beta17.ListSupportedMimeTypesRequest) (*v1beta17.ListSupportedMimeTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportedMimeTypes not implemented")
}
func (UnimplementedGatewayAPIServer) GetDefaultAppProviderForMimeType(context.Context, *v1beta17.GetDefaultAppProviderForMimeTypeRequest) (*v1beta17.GetDefaultAppProviderForMimeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultAppProviderForMimeType not implemented")
}
func (UnimplementedGatewayAPIServer) SetDefaultAppProviderForMimeType(context.Context, *v1beta17.SetDefaultAppProviderForMimeTypeRequest) (*v1beta17.SetDefaultAppProviderForMimeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultAppProviderForMimeType not implemented")
}
func (UnimplementedGatewayAPIServer) GetUser(context.Context, *v1beta18.GetUserRequest) (*v1beta18.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGatewayAPIServer) GetUserByClaim(context.Context, *v1beta18.GetUserByClaimRequest) (*v1beta18.GetUserByClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByClaim not implemented")
}
func (UnimplementedGatewayAPIServer) GetUserGroups(context.Context, *v1beta18.GetUserGroupsRequest) (*v1beta18.GetUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (UnimplementedGatewayAPIServer) FindUsers(context.Context, *v1beta18.FindUsersRequest) (*v1beta18.FindUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}
func (UnimplementedGatewayAPIServer) GetGroup(context.Context, *v1beta19.GetGroupRequest) (*v1beta19.GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGatewayAPIServer) GetGroupByClaim(context.Context, *v1beta19.GetGroupByClaimRequest) (*v1beta19.GetGroupByClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByClaim not implemented")
}
func (UnimplementedGatewayAPIServer) GetMembers(context.Context, *v1beta19.GetMembersRequest) (*v1beta19.GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedGatewayAPIServer) HasMember(context.Context, *v1beta19.HasMemberRequest) (*v1beta19.HasMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasMember not implemented")
}
func (UnimplementedGatewayAPIServer) FindGroups(context.Context, *v1beta19.FindGroupsRequest) (*v1beta19.FindGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroups not implemented")
}
func (UnimplementedGatewayAPIServer) ListAuthProviders(context.Context, *v1beta110.ListAuthProvidersRequest) (*ListAuthProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthProviders not implemented")
}
func (UnimplementedGatewayAPIServer) GetHome(context.Context, *v1beta11.GetHomeRequest) (*v1beta11.GetHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHome not implemented")
}
func (UnimplementedGatewayAPIServer) GenerateInviteToken(context.Context, *v1beta111.GenerateInviteTokenRequest) (*v1beta111.GenerateInviteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInviteToken not implemented")
}
func (UnimplementedGatewayAPIServer) ListInviteTokens(context.Context, *v1beta111.ListInviteTokensRequest) (*v1beta111.ListInviteTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInviteTokens not implemented")
}
func (UnimplementedGatewayAPIServer) ForwardInvite(context.Context, *v1beta111.ForwardInviteRequest) (*v1beta111.ForwardInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardInvite not implemented")
}
func (UnimplementedGatewayAPIServer) AcceptInvite(context.Context, *v1beta111.AcceptInviteRequest) (*v1beta111.AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedGatewayAPIServer) GetAcceptedUser(context.Context, *v1beta111.GetAcceptedUserRequest) (*v1beta111.GetAcceptedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcceptedUser not implemented")
}
func (UnimplementedGatewayAPIServer) FindAcceptedUsers(context.Context, *v1beta111.FindAcceptedUsersRequest) (*v1beta111.FindAcceptedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAcceptedUsers not implemented")
}
func (UnimplementedGatewayAPIServer) DeleteAcceptedUser(context.Context, *v1beta111.DeleteAcceptedUserRequest) (*v1beta111.DeleteAcceptedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcceptedUser not implemented")
}
func (UnimplementedGatewayAPIServer) IsProviderAllowed(context.Context, *v1beta112.IsProviderAllowedRequest) (*v1beta112.IsProviderAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProviderAllowed not implemented")
}
func (UnimplementedGatewayAPIServer) GetInfoByDomain(context.Context, *v1beta112.GetInfoByDomainRequest) (*v1beta112.GetInfoByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByDomain not implemented")
}
func (UnimplementedGatewayAPIServer) ListAllProviders(context.Context, *v1beta112.ListAllProvidersRequest) (*v1beta112.ListAllProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllProviders not implemented")
}
func (UnimplementedGatewayAPIServer) CreateOCMCoreShare(context.Context, *v1beta113.CreateOCMCoreShareRequest) (*v1beta113.CreateOCMCoreShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOCMCoreShare not implemented")
}
func (UnimplementedGatewayAPIServer) UpdateOCMCoreShare(context.Context, *v1beta113.UpdateOCMCoreShareRequest) (*v1beta113.UpdateOCMCoreShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOCMCoreShare not implemented")
}
func (UnimplementedGatewayAPIServer) DeleteOCMCoreShare(context.Context, *v1beta113.DeleteOCMCoreShareRequest) (*v1beta113.DeleteOCMCoreShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOCMCoreShare not implemented")
}
func (UnimplementedGatewayAPIServer) CreateTransfer(context.Context, *v1beta114.CreateTransferRequest) (*v1beta114.CreateTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedGatewayAPIServer) GetTransferStatus(context.Context, *v1beta114.GetTransferStatusRequest) (*v1beta114.GetTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferStatus not implemented")
}
func (UnimplementedGatewayAPIServer) CancelTransfer(context.Context, *v1beta114.CancelTransferRequest) (*v1beta114.CancelTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTransfer not implemented")
}
func (UnimplementedGatewayAPIServer) ListTransfers(context.Context, *v1beta114.ListTransfersRequest) (*v1beta114.ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (UnimplementedGatewayAPIServer) RetryTransfer(context.Context, *v1beta114.RetryTransferRequest) (*v1beta114.RetryTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryTransfer not implemented")
}
func (UnimplementedGatewayAPIServer) CheckPermission(context.Context, *v1beta115.CheckPermissionRequest) (*v1beta115.CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}

// UnsafeGatewayAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayAPIServer will
// result in compilation errors.
type UnsafeGatewayAPIServer interface {
	mustEmbedUnimplementedGatewayAPIServer()
}

func RegisterGatewayAPIServer(s grpc.ServiceRegistrar, srv GatewayAPIServer) {
	s.RegisterService(&GatewayAPI_ServiceDesc, srv)
}

func _GatewayAPI_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).WhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GenerateAppPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.GenerateAppPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GenerateAppPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GenerateAppPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GenerateAppPassword(ctx, req.(*v1beta1.GenerateAppPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListAppPasswords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.ListAppPasswordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListAppPasswords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListAppPasswords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListAppPasswords(ctx, req.(*v1beta1.ListAppPasswordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_InvalidateAppPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.InvalidateAppPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).InvalidateAppPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_InvalidateAppPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).InvalidateAppPassword(ctx, req.(*v1beta1.InvalidateAppPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetAppPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta1.GetAppPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetAppPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetAppPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetAppPassword(ctx, req.(*v1beta1.GetAppPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateContainer(ctx, req.(*v1beta11.CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_TouchFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.TouchFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).TouchFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_TouchFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).TouchFile(ctx, req.(*v1beta11.TouchFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Delete(ctx, req.(*v1beta11.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetPath(ctx, req.(*v1beta11.GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetQuota(ctx, req.(*GetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_InitiateFileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.InitiateFileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).InitiateFileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_InitiateFileDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).InitiateFileDownload(ctx, req.(*v1beta11.InitiateFileDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_InitiateFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.InitiateFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).InitiateFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_InitiateFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).InitiateFileUpload(ctx, req.(*v1beta11.InitiateFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListContainerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1beta11.ListContainerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayAPIServer).ListContainerStream(m, &gatewayAPIListContainerStreamServer{stream})
}

type GatewayAPI_ListContainerStreamServer interface {
	Send(*v1beta11.ListContainerStreamResponse) error
	grpc.ServerStream
}

type gatewayAPIListContainerStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayAPIListContainerStreamServer) Send(m *v1beta11.ListContainerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayAPI_ListContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.ListContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListContainer(ctx, req.(*v1beta11.ListContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListFileVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.ListFileVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListFileVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListFileVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListFileVersions(ctx, req.(*v1beta11.ListFileVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListRecycleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1beta11.ListRecycleStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayAPIServer).ListRecycleStream(m, &gatewayAPIListRecycleStreamServer{stream})
}

type GatewayAPI_ListRecycleStreamServer interface {
	Send(*v1beta11.ListRecycleStreamResponse) error
	grpc.ServerStream
}

type gatewayAPIListRecycleStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayAPIListRecycleStreamServer) Send(m *v1beta11.ListRecycleStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayAPI_ListRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.ListRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListRecycle(ctx, req.(*v1beta11.ListRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Move(ctx, req.(*v1beta11.MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_PurgeRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.PurgeRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).PurgeRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_PurgeRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).PurgeRecycle(ctx, req.(*v1beta11.PurgeRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RestoreFileVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.RestoreFileVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RestoreFileVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_RestoreFileVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RestoreFileVersion(ctx, req.(*v1beta11.RestoreFileVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RestoreRecycleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.RestoreRecycleItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RestoreRecycleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_RestoreRecycleItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RestoreRecycleItem(ctx, req.(*v1beta11.RestoreRecycleItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Stat(ctx, req.(*v1beta11.StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateSymlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.CreateSymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateSymlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreateSymlink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateSymlink(ctx, req.(*v1beta11.CreateSymlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_SetArbitraryMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.SetArbitraryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).SetArbitraryMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_SetArbitraryMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).SetArbitraryMetadata(ctx, req.(*v1beta11.SetArbitraryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UnsetArbitraryMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.UnsetArbitraryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UnsetArbitraryMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_UnsetArbitraryMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UnsetArbitraryMetadata(ctx, req.(*v1beta11.UnsetArbitraryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_SetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.SetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).SetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_SetLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).SetLock(ctx, req.(*v1beta11.SetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.GetLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetLock(ctx, req.(*v1beta11.GetLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RefreshLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.RefreshLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RefreshLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_RefreshLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RefreshLock(ctx, req.(*v1beta11.RefreshLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).Unlock(ctx, req.(*v1beta11.UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.CreateHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreateHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateHome(ctx, req.(*v1beta11.CreateHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateStorageSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.CreateStorageSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateStorageSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreateStorageSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateStorageSpace(ctx, req.(*v1beta11.CreateStorageSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListStorageSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.ListStorageSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListStorageSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListStorageSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListStorageSpaces(ctx, req.(*v1beta11.ListStorageSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateStorageSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.UpdateStorageSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateStorageSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_UpdateStorageSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateStorageSpace(ctx, req.(*v1beta11.UpdateStorageSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_DeleteStorageSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.DeleteStorageSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).DeleteStorageSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_DeleteStorageSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).DeleteStorageSpace(ctx, req.(*v1beta11.DeleteStorageSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_OpenInApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenInAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).OpenInApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_OpenInApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).OpenInApp(ctx, req.(*OpenInAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.CreateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreateShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateShare(ctx, req.(*v1beta13.CreateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RemoveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.RemoveShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RemoveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_RemoveShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RemoveShare(ctx, req.(*v1beta13.RemoveShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.GetShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetShare(ctx, req.(*v1beta13.GetShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.ListSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListShares(ctx, req.(*v1beta13.ListSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListExistingShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.ListSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListExistingShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListExistingShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListExistingShares(ctx, req.(*v1beta13.ListSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.UpdateShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_UpdateShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateShare(ctx, req.(*v1beta13.UpdateShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListReceivedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.ListReceivedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListReceivedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListReceivedShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListReceivedShares(ctx, req.(*v1beta13.ListReceivedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListExistingReceivedShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.ListReceivedSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListExistingReceivedShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListExistingReceivedShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListExistingReceivedShares(ctx, req.(*v1beta13.ListReceivedSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.UpdateReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_UpdateReceivedShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateReceivedShare(ctx, req.(*v1beta13.UpdateReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetReceivedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta13.GetReceivedShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetReceivedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetReceivedShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetReceivedShare(ctx, req.(*v1beta13.GetReceivedShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta14.SetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_SetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).SetKey(ctx, req.(*v1beta14.SetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta14.GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetKey(ctx, req.(*v1beta14.GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreatePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.CreatePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreatePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreatePublicShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreatePublicShare(ctx, req.(*v1beta15.CreatePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RemovePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.RemovePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RemovePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_RemovePublicShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RemovePublicShare(ctx, req.(*v1beta15.RemovePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetPublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.GetPublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetPublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetPublicShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetPublicShare(ctx, req.(*v1beta15.GetPublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetPublicShareByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.GetPublicShareByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetPublicShareByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetPublicShareByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetPublicShareByToken(ctx, req.(*v1beta15.GetPublicShareByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListPublicShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.ListPublicSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListPublicShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListPublicShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListPublicShares(ctx, req.(*v1beta15.ListPublicSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListExistingPublicShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.ListPublicSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListExistingPublicShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListExistingPublicShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListExistingPublicShares(ctx, req.(*v1beta15.ListPublicSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdatePublicShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta15.UpdatePublicShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdatePublicShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_UpdatePublicShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdatePublicShare(ctx, req.(*v1beta15.UpdatePublicShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.CreateOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreateOCMShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateOCMShare(ctx, req.(*v1beta16.CreateOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RemoveOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.RemoveOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RemoveOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_RemoveOCMShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RemoveOCMShare(ctx, req.(*v1beta16.RemoveOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.GetOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetOCMShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetOCMShare(ctx, req.(*v1beta16.GetOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetOCMShareByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.GetOCMShareByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetOCMShareByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetOCMShareByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetOCMShareByToken(ctx, req.(*v1beta16.GetOCMShareByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListOCMShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.ListOCMSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListOCMShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListOCMShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListOCMShares(ctx, req.(*v1beta16.ListOCMSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.UpdateOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_UpdateOCMShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateOCMShare(ctx, req.(*v1beta16.UpdateOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListReceivedOCMShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.ListReceivedOCMSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListReceivedOCMShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListReceivedOCMShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListReceivedOCMShares(ctx, req.(*v1beta16.ListReceivedOCMSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateReceivedOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.UpdateReceivedOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateReceivedOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_UpdateReceivedOCMShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateReceivedOCMShare(ctx, req.(*v1beta16.UpdateReceivedOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetReceivedOCMShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta16.GetReceivedOCMShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetReceivedOCMShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetReceivedOCMShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetReceivedOCMShare(ctx, req.(*v1beta16.GetReceivedOCMShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetAppProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.GetAppProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetAppProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetAppProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetAppProviders(ctx, req.(*v1beta17.GetAppProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_AddAppProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.AddAppProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).AddAppProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_AddAppProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).AddAppProvider(ctx, req.(*v1beta17.AddAppProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListAppProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.ListAppProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListAppProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListAppProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListAppProviders(ctx, req.(*v1beta17.ListAppProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListSupportedMimeTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.ListSupportedMimeTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListSupportedMimeTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListSupportedMimeTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListSupportedMimeTypes(ctx, req.(*v1beta17.ListSupportedMimeTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetDefaultAppProviderForMimeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.GetDefaultAppProviderForMimeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetDefaultAppProviderForMimeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetDefaultAppProviderForMimeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetDefaultAppProviderForMimeType(ctx, req.(*v1beta17.GetDefaultAppProviderForMimeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_SetDefaultAppProviderForMimeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta17.SetDefaultAppProviderForMimeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).SetDefaultAppProviderForMimeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_SetDefaultAppProviderForMimeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).SetDefaultAppProviderForMimeType(ctx, req.(*v1beta17.SetDefaultAppProviderForMimeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetUser(ctx, req.(*v1beta18.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetUserByClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.GetUserByClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetUserByClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetUserByClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetUserByClaim(ctx, req.(*v1beta18.GetUserByClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.GetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetUserGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetUserGroups(ctx, req.(*v1beta18.GetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta18.FindUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_FindUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).FindUsers(ctx, req.(*v1beta18.FindUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta19.GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetGroup(ctx, req.(*v1beta19.GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetGroupByClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta19.GetGroupByClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetGroupByClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetGroupByClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetGroupByClaim(ctx, req.(*v1beta19.GetGroupByClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta19.GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetMembers(ctx, req.(*v1beta19.GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_HasMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta19.HasMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).HasMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_HasMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).HasMember(ctx, req.(*v1beta19.HasMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_FindGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta19.FindGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).FindGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_FindGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).FindGroups(ctx, req.(*v1beta19.FindGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListAuthProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta110.ListAuthProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListAuthProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListAuthProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListAuthProviders(ctx, req.(*v1beta110.ListAuthProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta11.GetHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetHome(ctx, req.(*v1beta11.GetHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GenerateInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.GenerateInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GenerateInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GenerateInviteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GenerateInviteToken(ctx, req.(*v1beta111.GenerateInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListInviteTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.ListInviteTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListInviteTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListInviteTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListInviteTokens(ctx, req.(*v1beta111.ListInviteTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ForwardInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.ForwardInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ForwardInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ForwardInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ForwardInvite(ctx, req.(*v1beta111.ForwardInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_AcceptInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).AcceptInvite(ctx, req.(*v1beta111.AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetAcceptedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.GetAcceptedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetAcceptedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetAcceptedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetAcceptedUser(ctx, req.(*v1beta111.GetAcceptedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_FindAcceptedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.FindAcceptedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).FindAcceptedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_FindAcceptedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).FindAcceptedUsers(ctx, req.(*v1beta111.FindAcceptedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_DeleteAcceptedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta111.DeleteAcceptedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).DeleteAcceptedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_DeleteAcceptedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).DeleteAcceptedUser(ctx, req.(*v1beta111.DeleteAcceptedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_IsProviderAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta112.IsProviderAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).IsProviderAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_IsProviderAllowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).IsProviderAllowed(ctx, req.(*v1beta112.IsProviderAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetInfoByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta112.GetInfoByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetInfoByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetInfoByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetInfoByDomain(ctx, req.(*v1beta112.GetInfoByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListAllProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta112.ListAllProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListAllProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListAllProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListAllProviders(ctx, req.(*v1beta112.ListAllProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateOCMCoreShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta113.CreateOCMCoreShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateOCMCoreShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreateOCMCoreShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateOCMCoreShare(ctx, req.(*v1beta113.CreateOCMCoreShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_UpdateOCMCoreShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta113.UpdateOCMCoreShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).UpdateOCMCoreShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_UpdateOCMCoreShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).UpdateOCMCoreShare(ctx, req.(*v1beta113.UpdateOCMCoreShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_DeleteOCMCoreShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta113.DeleteOCMCoreShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).DeleteOCMCoreShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_DeleteOCMCoreShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).DeleteOCMCoreShare(ctx, req.(*v1beta113.DeleteOCMCoreShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta114.CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CreateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CreateTransfer(ctx, req.(*v1beta114.CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_GetTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta114.GetTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_GetTransferStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetTransferStatus(ctx, req.(*v1beta114.GetTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CancelTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta114.CancelTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CancelTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CancelTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CancelTransfer(ctx, req.(*v1beta114.CancelTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta114.ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_ListTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListTransfers(ctx, req.(*v1beta114.ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_RetryTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta114.RetryTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).RetryTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_RetryTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).RetryTransfer(ctx, req.(*v1beta114.RetryTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1beta115.CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAPI_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).CheckPermission(ctx, req.(*v1beta115.CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayAPI_ServiceDesc is the grpc.ServiceDesc for GatewayAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.gateway.v1beta1.GatewayAPI",
	HandlerType: (*GatewayAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _GatewayAPI_Authenticate_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _GatewayAPI_WhoAmI_Handler,
		},
		{
			MethodName: "GenerateAppPassword",
			Handler:    _GatewayAPI_GenerateAppPassword_Handler,
		},
		{
			MethodName: "ListAppPasswords",
			Handler:    _GatewayAPI_ListAppPasswords_Handler,
		},
		{
			MethodName: "InvalidateAppPassword",
			Handler:    _GatewayAPI_InvalidateAppPassword_Handler,
		},
		{
			MethodName: "GetAppPassword",
			Handler:    _GatewayAPI_GetAppPassword_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _GatewayAPI_CreateContainer_Handler,
		},
		{
			MethodName: "TouchFile",
			Handler:    _GatewayAPI_TouchFile_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayAPI_Delete_Handler,
		},
		{
			MethodName: "GetPath",
			Handler:    _GatewayAPI_GetPath_Handler,
		},
		{
			MethodName: "GetQuota",
			Handler:    _GatewayAPI_GetQuota_Handler,
		},
		{
			MethodName: "InitiateFileDownload",
			Handler:    _GatewayAPI_InitiateFileDownload_Handler,
		},
		{
			MethodName: "InitiateFileUpload",
			Handler:    _GatewayAPI_InitiateFileUpload_Handler,
		},
		{
			MethodName: "ListContainer",
			Handler:    _GatewayAPI_ListContainer_Handler,
		},
		{
			MethodName: "ListFileVersions",
			Handler:    _GatewayAPI_ListFileVersions_Handler,
		},
		{
			MethodName: "ListRecycle",
			Handler:    _GatewayAPI_ListRecycle_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _GatewayAPI_Move_Handler,
		},
		{
			MethodName: "PurgeRecycle",
			Handler:    _GatewayAPI_PurgeRecycle_Handler,
		},
		{
			MethodName: "RestoreFileVersion",
			Handler:    _GatewayAPI_RestoreFileVersion_Handler,
		},
		{
			MethodName: "RestoreRecycleItem",
			Handler:    _GatewayAPI_RestoreRecycleItem_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _GatewayAPI_Stat_Handler,
		},
		{
			MethodName: "CreateSymlink",
			Handler:    _GatewayAPI_CreateSymlink_Handler,
		},
		{
			MethodName: "SetArbitraryMetadata",
			Handler:    _GatewayAPI_SetArbitraryMetadata_Handler,
		},
		{
			MethodName: "UnsetArbitraryMetadata",
			Handler:    _GatewayAPI_UnsetArbitraryMetadata_Handler,
		},
		{
			MethodName: "SetLock",
			Handler:    _GatewayAPI_SetLock_Handler,
		},
		{
			MethodName: "GetLock",
			Handler:    _GatewayAPI_GetLock_Handler,
		},
		{
			MethodName: "RefreshLock",
			Handler:    _GatewayAPI_RefreshLock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _GatewayAPI_Unlock_Handler,
		},
		{
			MethodName: "CreateHome",
			Handler:    _GatewayAPI_CreateHome_Handler,
		},
		{
			MethodName: "CreateStorageSpace",
			Handler:    _GatewayAPI_CreateStorageSpace_Handler,
		},
		{
			MethodName: "ListStorageSpaces",
			Handler:    _GatewayAPI_ListStorageSpaces_Handler,
		},
		{
			MethodName: "UpdateStorageSpace",
			Handler:    _GatewayAPI_UpdateStorageSpace_Handler,
		},
		{
			MethodName: "DeleteStorageSpace",
			Handler:    _GatewayAPI_DeleteStorageSpace_Handler,
		},
		{
			MethodName: "OpenInApp",
			Handler:    _GatewayAPI_OpenInApp_Handler,
		},
		{
			MethodName: "CreateShare",
			Handler:    _GatewayAPI_CreateShare_Handler,
		},
		{
			MethodName: "RemoveShare",
			Handler:    _GatewayAPI_RemoveShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _GatewayAPI_GetShare_Handler,
		},
		{
			MethodName: "ListShares",
			Handler:    _GatewayAPI_ListShares_Handler,
		},
		{
			MethodName: "ListExistingShares",
			Handler:    _GatewayAPI_ListExistingShares_Handler,
		},
		{
			MethodName: "UpdateShare",
			Handler:    _GatewayAPI_UpdateShare_Handler,
		},
		{
			MethodName: "ListReceivedShares",
			Handler:    _GatewayAPI_ListReceivedShares_Handler,
		},
		{
			MethodName: "ListExistingReceivedShares",
			Handler:    _GatewayAPI_ListExistingReceivedShares_Handler,
		},
		{
			MethodName: "UpdateReceivedShare",
			Handler:    _GatewayAPI_UpdateReceivedShare_Handler,
		},
		{
			MethodName: "GetReceivedShare",
			Handler:    _GatewayAPI_GetReceivedShare_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _GatewayAPI_SetKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _GatewayAPI_GetKey_Handler,
		},
		{
			MethodName: "CreatePublicShare",
			Handler:    _GatewayAPI_CreatePublicShare_Handler,
		},
		{
			MethodName: "RemovePublicShare",
			Handler:    _GatewayAPI_RemovePublicShare_Handler,
		},
		{
			MethodName: "GetPublicShare",
			Handler:    _GatewayAPI_GetPublicShare_Handler,
		},
		{
			MethodName: "GetPublicShareByToken",
			Handler:    _GatewayAPI_GetPublicShareByToken_Handler,
		},
		{
			MethodName: "ListPublicShares",
			Handler:    _GatewayAPI_ListPublicShares_Handler,
		},
		{
			MethodName: "ListExistingPublicShares",
			Handler:    _GatewayAPI_ListExistingPublicShares_Handler,
		},
		{
			MethodName: "UpdatePublicShare",
			Handler:    _GatewayAPI_UpdatePublicShare_Handler,
		},
		{
			MethodName: "CreateOCMShare",
			Handler:    _GatewayAPI_CreateOCMShare_Handler,
		},
		{
			MethodName: "RemoveOCMShare",
			Handler:    _GatewayAPI_RemoveOCMShare_Handler,
		},
		{
			MethodName: "GetOCMShare",
			Handler:    _GatewayAPI_GetOCMShare_Handler,
		},
		{
			MethodName: "GetOCMShareByToken",
			Handler:    _GatewayAPI_GetOCMShareByToken_Handler,
		},
		{
			MethodName: "ListOCMShares",
			Handler:    _GatewayAPI_ListOCMShares_Handler,
		},
		{
			MethodName: "UpdateOCMShare",
			Handler:    _GatewayAPI_UpdateOCMShare_Handler,
		},
		{
			MethodName: "ListReceivedOCMShares",
			Handler:    _GatewayAPI_ListReceivedOCMShares_Handler,
		},
		{
			MethodName: "UpdateReceivedOCMShare",
			Handler:    _GatewayAPI_UpdateReceivedOCMShare_Handler,
		},
		{
			MethodName: "GetReceivedOCMShare",
			Handler:    _GatewayAPI_GetReceivedOCMShare_Handler,
		},
		{
			MethodName: "GetAppProviders",
			Handler:    _GatewayAPI_GetAppProviders_Handler,
		},
		{
			MethodName: "AddAppProvider",
			Handler:    _GatewayAPI_AddAppProvider_Handler,
		},
		{
			MethodName: "ListAppProviders",
			Handler:    _GatewayAPI_ListAppProviders_Handler,
		},
		{
			MethodName: "ListSupportedMimeTypes",
			Handler:    _GatewayAPI_ListSupportedMimeTypes_Handler,
		},
		{
			MethodName: "GetDefaultAppProviderForMimeType",
			Handler:    _GatewayAPI_GetDefaultAppProviderForMimeType_Handler,
		},
		{
			MethodName: "SetDefaultAppProviderForMimeType",
			Handler:    _GatewayAPI_SetDefaultAppProviderForMimeType_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GatewayAPI_GetUser_Handler,
		},
		{
			MethodName: "GetUserByClaim",
			Handler:    _GatewayAPI_GetUserByClaim_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _GatewayAPI_GetUserGroups_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _GatewayAPI_FindUsers_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GatewayAPI_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupByClaim",
			Handler:    _GatewayAPI_GetGroupByClaim_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _GatewayAPI_GetMembers_Handler,
		},
		{
			MethodName: "HasMember",
			Handler:    _GatewayAPI_HasMember_Handler,
		},
		{
			MethodName: "FindGroups",
			Handler:    _GatewayAPI_FindGroups_Handler,
		},
		{
			MethodName: "ListAuthProviders",
			Handler:    _GatewayAPI_ListAuthProviders_Handler,
		},
		{
			MethodName: "GetHome",
			Handler:    _GatewayAPI_GetHome_Handler,
		},
		{
			MethodName: "GenerateInviteToken",
			Handler:    _GatewayAPI_GenerateInviteToken_Handler,
		},
		{
			MethodName: "ListInviteTokens",
			Handler:    _GatewayAPI_ListInviteTokens_Handler,
		},
		{
			MethodName: "ForwardInvite",
			Handler:    _GatewayAPI_ForwardInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _GatewayAPI_AcceptInvite_Handler,
		},
		{
			MethodName: "GetAcceptedUser",
			Handler:    _GatewayAPI_GetAcceptedUser_Handler,
		},
		{
			MethodName: "FindAcceptedUsers",
			Handler:    _GatewayAPI_FindAcceptedUsers_Handler,
		},
		{
			MethodName: "DeleteAcceptedUser",
			Handler:    _GatewayAPI_DeleteAcceptedUser_Handler,
		},
		{
			MethodName: "IsProviderAllowed",
			Handler:    _GatewayAPI_IsProviderAllowed_Handler,
		},
		{
			MethodName: "GetInfoByDomain",
			Handler:    _GatewayAPI_GetInfoByDomain_Handler,
		},
		{
			MethodName: "ListAllProviders",
			Handler:    _GatewayAPI_ListAllProviders_Handler,
		},
		{
			MethodName: "CreateOCMCoreShare",
			Handler:    _GatewayAPI_CreateOCMCoreShare_Handler,
		},
		{
			MethodName: "UpdateOCMCoreShare",
			Handler:    _GatewayAPI_UpdateOCMCoreShare_Handler,
		},
		{
			MethodName: "DeleteOCMCoreShare",
			Handler:    _GatewayAPI_DeleteOCMCoreShare_Handler,
		},
		{
			MethodName: "CreateTransfer",
			Handler:    _GatewayAPI_CreateTransfer_Handler,
		},
		{
			MethodName: "GetTransferStatus",
			Handler:    _GatewayAPI_GetTransferStatus_Handler,
		},
		{
			MethodName: "CancelTransfer",
			Handler:    _GatewayAPI_CancelTransfer_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _GatewayAPI_ListTransfers_Handler,
		},
		{
			MethodName: "RetryTransfer",
			Handler:    _GatewayAPI_RetryTransfer_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _GatewayAPI_CheckPermission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListContainerStream",
			Handler:       _GatewayAPI_ListContainerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRecycleStream",
			Handler:       _GatewayAPI_ListRecycleStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cs3/gateway/v1beta1/gateway_api.proto",
}

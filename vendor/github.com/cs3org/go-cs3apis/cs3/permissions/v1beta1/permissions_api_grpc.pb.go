// Copyright 2018-2021 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cs3/permissions/v1beta1/permissions_api.proto

package permissionsv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PermissionsAPI_CheckPermission_FullMethodName = "/cs3.permissions.v1beta1.PermissionsAPI/CheckPermission"
)

// PermissionsAPIClient is the client API for PermissionsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionsAPIClient interface {
	// CheckPermission defines a method to check permission/role.
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
}

type permissionsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionsAPIClient(cc grpc.ClientConnInterface) PermissionsAPIClient {
	return &permissionsAPIClient{cc}
}

func (c *permissionsAPIClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, PermissionsAPI_CheckPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionsAPIServer is the server API for PermissionsAPI service.
// All implementations should embed UnimplementedPermissionsAPIServer
// for forward compatibility
type PermissionsAPIServer interface {
	// CheckPermission defines a method to check permission/role.
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
}

// UnimplementedPermissionsAPIServer should be embedded to have forward compatible implementations.
type UnimplementedPermissionsAPIServer struct {
}

func (UnimplementedPermissionsAPIServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}

// UnsafePermissionsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionsAPIServer will
// result in compilation errors.
type UnsafePermissionsAPIServer interface {
	mustEmbedUnimplementedPermissionsAPIServer()
}

func RegisterPermissionsAPIServer(s grpc.ServiceRegistrar, srv PermissionsAPIServer) {
	s.RegisterService(&PermissionsAPI_ServiceDesc, srv)
}

func _PermissionsAPI_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionsAPIServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionsAPI_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionsAPIServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionsAPI_ServiceDesc is the grpc.ServiceDesc for PermissionsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cs3.permissions.v1beta1.PermissionsAPI",
	HandlerType: (*PermissionsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPermission",
			Handler:    _PermissionsAPI_CheckPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cs3/permissions/v1beta1/permissions_api.proto",
}

// Copyright 2018-2019 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: cs3/rpc/v1beta1/code.proto

package rpcv1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// These are the canonical error codes used by CS3 APIs.
//
// Adapted from Google APIs:
// https://github.com/googleapis/googleapis/
//
// Sometimes multiple error codes may apply.  Services should return
// the most specific error code that applies.  For example, prefer
// `OUT_OF_RANGE` over `FAILED_PRECONDITION` if both codes apply.
// Similarly prefer `NOT_FOUND` or `ALREADY_EXISTS` over `FAILED_PRECONDITION`.
type Code int32

const (
	// A programmer would not intentionally set the code to CODE_INVALID.
	// This code exists to force service implementors to set
	// a specific code for the API call and to not rely on defaults.
	//
	// HTTP Mapping: 500 Internal Server Error
	Code_CODE_INVALID Code = 0
	// Not an error; returned on success
	//
	// HTTP Mapping: 200 OK
	Code_CODE_OK Code = 1
	// The operation was cancelled, typically by the caller.
	//
	// HTTP Mapping: 499 Client Closed Request
	Code_CODE_CANCELLED Code = 2
	// Unknown error.  For example, this error may be returned when
	// a `Status` value received from another address space belongs to
	// an error space that is not known in this address space.  Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	//
	// HTTP Mapping: 500 Internal Server Error
	Code_CODE_UNKNOWN Code = 3
	// The client specified an invalid argument.  Note that this differs
	// from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	//
	// HTTP Mapping: 400 Bad Request
	Code_CODE_INVALID_ARGUMENT Code = 4
	// The deadline expired before the operation could complete. For operations
	// that change the state of the system, this error may be returned
	// even if the operation has completed successfully.  For example, a
	// successful response from a server could have been delayed long
	// enough for the deadline to expire.
	//
	// HTTP Mapping: 504 Gateway Timeout
	Code_CODE_DEADLINE_EXCEEDED Code = 5
	// Some requested entity (e.g., file or directory) was not found.
	//
	// Note to server developers: if a request is denied for an entire class
	// of users, such as gradual feature rollout or undocumented whitelist,
	// `NOT_FOUND` may be used. If a request is denied for some users within
	// a class of users, such as user-based access control, `PERMISSION_DENIED`
	// must be used.
	//
	// HTTP Mapping: 404 Not Found
	Code_CODE_NOT_FOUND Code = 6
	// The entity that a client attempted to create (e.g., file or directory)
	// already exists.
	//
	// HTTP Mapping: 409 Conflict
	Code_CODE_ALREADY_EXISTS Code = 7
	// The caller does not have permission to execute the specified
	// operation. `PERMISSION_DENIED` must not be used for rejections
	// caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
	// instead for those errors). `PERMISSION_DENIED` must not be
	// used if the caller can not be identified (use `UNAUTHENTICATED`
	// instead for those errors). This error code does not imply the
	// request is valid or the requested entity exists or satisfies
	// other pre-conditions.
	//
	// HTTP Mapping: 403 Forbidden
	Code_CODE_PERMISSION_DENIED Code = 8
	// The request does not have valid authentication credentials for the
	// operation.
	//
	// HTTP Mapping: 401 Unauthorized
	Code_CODE_UNAUTHENTICATED Code = 9
	// Some resource has been exhausted, perhaps a per-user quota, or
	// perhaps the entire file system is out of space.
	//
	// HTTP Mapping: 429 Too Many Requests
	Code_CODE_RESOURCE_EXHAUSTED Code = 10
	// The operation was rejected because the system is not in a state
	// required for the operation's execution.  For example, the directory
	// to be deleted is non-empty, an rmdir operation is applied to
	// a non-directory, etc.
	//
	// Service implementors can use the following guidelines to decide
	// between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
	//
	//	(a) Use `UNAVAILABLE` if the client can retry just the failing call.
	//	(b) Use `ABORTED` if the client should retry at a higher level
	//	    (e.g., when a client-specified test-and-set fails, indicating the
	//	    client should restart a read-modify-write sequence).
	//	(c) Use `FAILED_PRECONDITION` if the client should not retry until
	//	    the system state has been explicitly fixed.  E.g., if an "rmdir"
	//	    fails because the directory is non-empty, `FAILED_PRECONDITION`
	//	    should be returned since the client should not retry unless
	//	    the files are deleted from the directory.
	//
	// HTTP Mapping: 400 Bad Request
	Code_CODE_FAILED_PRECONDITION Code = 11
	// The operation was aborted, typically due to a concurrency issue such as
	// a sequencer check failure or transaction abort.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	//
	// HTTP Mapping: 409 Conflict
	Code_CODE_ABORTED Code = 12
	// The operation was attempted past the valid range.  E.g., seeking or
	// reading past end-of-file.
	//
	// Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate `INVALID_ARGUMENT` if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// `OUT_OF_RANGE` if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between `FAILED_PRECONDITION` and
	// `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an `OUT_OF_RANGE` error to detect when
	// they are done.
	//
	// HTTP Mapping: 400 Bad Request
	Code_CODE_OUT_OF_RANGE Code = 13
	// The operation is not implemented or is not supported/enabled in this
	// service.
	//
	// HTTP Mapping: 501 Not Implemented
	Code_CODE_UNIMPLEMENTED Code = 14
	// Internal errors.  This means that some invariants expected by the
	// underlying system have been broken.  This error code is reserved
	// for serious errors.
	//
	// HTTP Mapping: 500 Internal Server Error
	Code_CODE_INTERNAL Code = 15
	// The service is currently unavailable.  This is most likely a
	// transient condition, which can be corrected by retrying with
	// a backoff.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	//
	// HTTP Mapping: 503 Service Unavailable
	Code_CODE_UNAVAILABLE Code = 16
	// Unrecoverable data loss or corruption.
	//
	// HTTP Mapping: 500 Internal Server Error
	Code_CODE_DATA_LOSS Code = 17
	// Redirects the operation to another location.
	// Used in a Status reponse with a reference to the target URI.
	Code_CODE_REDIRECTION Code = 18
	// The operation could not be performed because there is not enough
	// storage available. This can be because of lack of real storage
	// space or because of the exceeding of a quota associated to a
	// storage.
	//
	// HTTP Mapping: 507 Insufficient Storage
	Code_CODE_INSUFFICIENT_STORAGE Code = 19
	// The ability to lock a resource is specific to some WebDAV servers.
	// The HTTP 423 Locked error response code indicates that either
	// the resources tentatively targeted by is locked, meaning it can't be accessed.
	//
	// HTTP Mapping: 423 Locked
	Code_CODE_LOCKED Code = 20
	// The server returns the response status code to indicate that it has received
	// the request but is not going to process it because an asynchronous job
	// that has been started is still being processed and the result can not yet be provided.
	//
	// HTTP Mapping: 425 Too Early
	Code_CODE_TOO_EARLY Code = 21
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:  "CODE_INVALID",
		1:  "CODE_OK",
		2:  "CODE_CANCELLED",
		3:  "CODE_UNKNOWN",
		4:  "CODE_INVALID_ARGUMENT",
		5:  "CODE_DEADLINE_EXCEEDED",
		6:  "CODE_NOT_FOUND",
		7:  "CODE_ALREADY_EXISTS",
		8:  "CODE_PERMISSION_DENIED",
		9:  "CODE_UNAUTHENTICATED",
		10: "CODE_RESOURCE_EXHAUSTED",
		11: "CODE_FAILED_PRECONDITION",
		12: "CODE_ABORTED",
		13: "CODE_OUT_OF_RANGE",
		14: "CODE_UNIMPLEMENTED",
		15: "CODE_INTERNAL",
		16: "CODE_UNAVAILABLE",
		17: "CODE_DATA_LOSS",
		18: "CODE_REDIRECTION",
		19: "CODE_INSUFFICIENT_STORAGE",
		20: "CODE_LOCKED",
		21: "CODE_TOO_EARLY",
	}
	Code_value = map[string]int32{
		"CODE_INVALID":              0,
		"CODE_OK":                   1,
		"CODE_CANCELLED":            2,
		"CODE_UNKNOWN":              3,
		"CODE_INVALID_ARGUMENT":     4,
		"CODE_DEADLINE_EXCEEDED":    5,
		"CODE_NOT_FOUND":            6,
		"CODE_ALREADY_EXISTS":       7,
		"CODE_PERMISSION_DENIED":    8,
		"CODE_UNAUTHENTICATED":      9,
		"CODE_RESOURCE_EXHAUSTED":   10,
		"CODE_FAILED_PRECONDITION":  11,
		"CODE_ABORTED":              12,
		"CODE_OUT_OF_RANGE":         13,
		"CODE_UNIMPLEMENTED":        14,
		"CODE_INTERNAL":             15,
		"CODE_UNAVAILABLE":          16,
		"CODE_DATA_LOSS":            17,
		"CODE_REDIRECTION":          18,
		"CODE_INSUFFICIENT_STORAGE": 19,
		"CODE_LOCKED":               20,
		"CODE_TOO_EARLY":            21,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_cs3_rpc_v1beta1_code_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_cs3_rpc_v1beta1_code_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_cs3_rpc_v1beta1_code_proto_rawDescGZIP(), []int{0}
}

var File_cs3_rpc_v1beta1_code_proto protoreflect.FileDescriptor

var file_cs3_rpc_v1beta1_code_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x73, 0x33, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x73,
	0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2a, 0xf8, 0x03,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x07, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10,
	0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x11, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x53,
	0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x15, 0x42, 0xb7, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x73, 0x33, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x42, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x33, 0x6f, 0x72, 0x67,
	0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x73, 0x33, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x73, 0x33, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x72, 0x70, 0x63, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x52, 0x58, 0xaa, 0x02, 0x0f, 0x43,
	0x73, 0x33, 0x2e, 0x52, 0x70, 0x63, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02,
	0x0f, 0x43, 0x73, 0x33, 0x5c, 0x52, 0x70, 0x63, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xe2, 0x02, 0x1b, 0x43, 0x73, 0x33, 0x5c, 0x52, 0x70, 0x63, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x11, 0x43, 0x73, 0x33, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cs3_rpc_v1beta1_code_proto_rawDescOnce sync.Once
	file_cs3_rpc_v1beta1_code_proto_rawDescData = file_cs3_rpc_v1beta1_code_proto_rawDesc
)

func file_cs3_rpc_v1beta1_code_proto_rawDescGZIP() []byte {
	file_cs3_rpc_v1beta1_code_proto_rawDescOnce.Do(func() {
		file_cs3_rpc_v1beta1_code_proto_rawDescData = protoimpl.X.CompressGZIP(file_cs3_rpc_v1beta1_code_proto_rawDescData)
	})
	return file_cs3_rpc_v1beta1_code_proto_rawDescData
}

var file_cs3_rpc_v1beta1_code_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cs3_rpc_v1beta1_code_proto_goTypes = []interface{}{
	(Code)(0), // 0: cs3.rpc.v1beta1.Code
}
var file_cs3_rpc_v1beta1_code_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cs3_rpc_v1beta1_code_proto_init() }
func file_cs3_rpc_v1beta1_code_proto_init() {
	if File_cs3_rpc_v1beta1_code_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cs3_rpc_v1beta1_code_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cs3_rpc_v1beta1_code_proto_goTypes,
		DependencyIndexes: file_cs3_rpc_v1beta1_code_proto_depIdxs,
		EnumInfos:         file_cs3_rpc_v1beta1_code_proto_enumTypes,
	}.Build()
	File_cs3_rpc_v1beta1_code_proto = out.File
	file_cs3_rpc_v1beta1_code_proto_rawDesc = nil
	file_cs3_rpc_v1beta1_code_proto_goTypes = nil
	file_cs3_rpc_v1beta1_code_proto_depIdxs = nil
}

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	connector "github.com/owncloud/ocis/v2/services/collaboration/pkg/connector"
	mock "github.com/stretchr/testify/mock"
)

// ConnectorService is an autogenerated mock type for the ConnectorService type
type ConnectorService struct {
	mock.Mock
}

type ConnectorService_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectorService) EXPECT() *ConnectorService_Expecter {
	return &ConnectorService_Expecter{mock: &_m.Mock}
}

// GetContentConnector provides a mock function with given fields:
func (_m *ConnectorService) GetContentConnector() connector.ContentConnectorService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContentConnector")
	}

	var r0 connector.ContentConnectorService
	if rf, ok := ret.Get(0).(func() connector.ContentConnectorService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connector.ContentConnectorService)
		}
	}

	return r0
}

// ConnectorService_GetContentConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContentConnector'
type ConnectorService_GetContentConnector_Call struct {
	*mock.Call
}

// GetContentConnector is a helper method to define mock.On call
func (_e *ConnectorService_Expecter) GetContentConnector() *ConnectorService_GetContentConnector_Call {
	return &ConnectorService_GetContentConnector_Call{Call: _e.mock.On("GetContentConnector")}
}

func (_c *ConnectorService_GetContentConnector_Call) Run(run func()) *ConnectorService_GetContentConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectorService_GetContentConnector_Call) Return(_a0 connector.ContentConnectorService) *ConnectorService_GetContentConnector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectorService_GetContentConnector_Call) RunAndReturn(run func() connector.ContentConnectorService) *ConnectorService_GetContentConnector_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileConnector provides a mock function with given fields:
func (_m *ConnectorService) GetFileConnector() connector.FileConnectorService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFileConnector")
	}

	var r0 connector.FileConnectorService
	if rf, ok := ret.Get(0).(func() connector.FileConnectorService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(connector.FileConnectorService)
		}
	}

	return r0
}

// ConnectorService_GetFileConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileConnector'
type ConnectorService_GetFileConnector_Call struct {
	*mock.Call
}

// GetFileConnector is a helper method to define mock.On call
func (_e *ConnectorService_Expecter) GetFileConnector() *ConnectorService_GetFileConnector_Call {
	return &ConnectorService_GetFileConnector_Call{Call: _e.mock.On("GetFileConnector")}
}

func (_c *ConnectorService_GetFileConnector_Call) Run(run func()) *ConnectorService_GetFileConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectorService_GetFileConnector_Call) Return(_a0 connector.FileConnectorService) *ConnectorService_GetFileConnector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectorService_GetFileConnector_Call) RunAndReturn(run func() connector.FileConnectorService) *ConnectorService_GetFileConnector_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectorService creates a new instance of ConnectorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectorService {
	mock := &ConnectorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
